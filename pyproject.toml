[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "greenlang"
version = "0.9.0"
description = "GreenLang - The Climate Intelligence Framework for the Entire Climate Industry"
authors = [{name = "GreenLang Team", email = "team@greenlang.io"}]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "PyYAML>=6.0",
    "rich>=13.0.0",
    "httpx>=0.24.0",
    "pandas>=2.0.0",
    "openpyxl>=3.1.0",
    "psutil>=5.9.0",
    "jsonschema>=4.0.0",
    "aiofiles>=23.0.0",
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
    "faiss-cpu>=1.7.4",
    "sentence-transformers>=2.2.0",
    "pypdf>=3.17.0",
    "chromadb>=0.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-regressions>=2.5.0",
    "hypothesis>=6.80.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "black>=23.7.0",
    "coverage[toml]>=7.2.0",
]

[project.scripts]
greenlang = "greenlang.cli.main:cli"
gl = "greenlang.cli.complete_cli:cli"

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []
fixable = ["ALL"]
unfixable = []
exclude = [
    ".git",
    ".ruff_cache",
    ".mypy_cache",
    "__pycache__",
    "dist",
    "build",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.mypy_cache
  | \.ruff_cache
  | __pycache__
  | build
  | dist
)/
'''

[tool.coverage.run]
source = ["greenlang", "apps"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.pytest.ini_options]
testpaths = ["tests", "apps/climatenza_app/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=greenlang",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=85",
    "--maxfail=1",
]
markers = [
    "unit: Unit tests",
    "property: Property-based tests",
    "integration: Integration tests",
    "slow: Tests that take > 5s",
    "snapshot: Snapshot/golden file tests",
]