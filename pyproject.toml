[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "greenlang-cli"
version = "0.3.0"
description = "Climate Intelligence Platform - Enterprise infrastructure with powerful SDK for climate-aware applications"
readme = "README.md"
authors = [{ name = "GreenLang Maintainers", email = "maintainers@greenlang.io" }]
license = { text = "MIT" }
requires-python = ">=3.10"
keywords = [
  "climate",
  "emissions",
  "sustainability",
  "carbon",
  "green",
  "environment",
  "AI",
  "orchestration",
  "platform",
  "infrastructure",
  "framework",
  "SDK",
  "climate-intelligence",
  "decarbonization",
  "net-zero",
  "ESG",
  "HVAC",
  "buildings",
  "energy"
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Atmospheric Science",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Operating System :: OS Independent",
  "Environment :: Console",
  "Framework :: Pydantic",
  "Natural Language :: English",
]
dependencies = [
  "typer>=0.12",
  "pydantic>=2.7",
  "pyyaml>=6.0",
  "rich>=13.0",
  "jsonschema>=4.19.0",
  "packaging>=22.0",
  "python-dotenv>=1.0.0",
  "typing-extensions>=4.9.0",
  "httpx>=0.24.0",
  "requests>=2.31.0",
  "networkx>=3.0",
  "tenacity>=8.2.3",
  "psutil>=5.9.0",
]

[project.urls]
"Homepage" = "https://greenlang.io"
"Documentation" = "https://greenlang.io/docs"
"Repository" = "https://github.com/greenlang/greenlang"
"Bug Tracker" = "https://github.com/greenlang/greenlang/issues"
"Changelog" = "https://github.com/greenlang/greenlang/blob/main/CHANGELOG.md"
"Discord" = "https://discord.gg/greenlang"

[project.scripts]
# CLI entry points
gl = "greenlang.cli.main:main"
greenlang = "greenlang.cli.main:main"  # Backward compatibility

[project.optional-dependencies]
analytics = [
  "pandas>=2.0.0",
  "numpy>=1.24.0",
]
cli = [
  "click>=8.0.0",
  "rich>=13.0.0",
]
data = [
  "pandas>=2.0.0",
  "numpy>=1.24.0",
  "openpyxl>=3.1.0",
  "jinja2>=3.1.0",
  "weasyprint>=60.0",
  "sqlalchemy>=2.0.0",
  "alembic>=1.12.0",
  "psycopg2-binary>=2.9.0",
  "pymongo>=4.5.0",
]
llm = [
  "openai>=1.0.0",
  "langchain>=0.1.0",
  "langchain-openai>=0.0.5",
  "langchain-community>=0.0.10",
  "anthropic>=0.7.0",
  "faiss-cpu>=1.7.4",
  "sentence-transformers>=2.2.0",
  "pypdf>=3.17.0",
  "chromadb>=0.4.0",
]
server = [
  "aiohttp>=3.8.0",
  "fastapi>=0.104.0",
  "uvicorn>=0.24.0",
  "redis>=5.0.0",
  "celery>=5.3.0",
  "prometheus-client>=0.18.0",
  "opentelemetry-api>=1.20.0",
  "structlog>=23.0.0",
  "gunicorn>=21.0.0",
]
security = [
  "cryptography>=41.0.0",
  "PyJWT>=2.8.0",
]
sbom = [
  "sigstore>=3.0.0",
  "cyclonedx-bom>=4.0.0",
  "cryptography>=41.0.0",
]
supply-chain = [
  "sigstore>=3.0.0",
  "cyclonedx-bom>=4.0.0",
  "cryptography>=41.0.0",
  "pip-audit>=2.6.0",
  "safety>=3.0.0",
]
test = [
  "pytest>=7.4.0",
  "pytest-cov>=4.1.0",
  "pytest-asyncio>=0.21.0",
  "pytest-mock>=3.11.0",
  "pytest-timeout>=2.1.0",
  "pytest-xdist>=3.3.0",
  "pytest-benchmark>=4.0.0",
  "pytest-regressions>=2.5.0",
  "hypothesis>=6.80.0",
  "psutil>=5.9.0",
  "coverage[toml]>=7.2.0",
  "faker>=19.0.0",
  "responses>=0.23.0",
  "freezegun>=1.2.0",
  "factory-boy>=3.3.0",
  "greenlang[cli]",
  "greenlang[data]",
  "greenlang[analytics]",
  "greenlang[security]",
]
dev = [
  "mypy>=1.7.0",
  "ruff>=0.1.0",
  "black>=23.7.0",
  "isort>=5.12.0",
  "bandit>=1.7.0",
  "types-PyYAML>=6.0.12",
  "types-requests>=2.31.0",
  "types-redis>=4.6.0",
  "types-jsonschema>=4.19.0",
  "ipython>=8.0.0",
  "jupyter>=1.0.0",
  "pre-commit>=3.0.0",
  "watchdog>=3.0.0",
  "docker>=6.1.0",
  "kubernetes>=28.0.0",
  "flake8>=6.0",
]
doc = [
  "mkdocs>=1.5.0",
  "mkdocs-material>=9.0.0",
  "mkdocstrings>=0.23.0",
]
full = [
  "greenlang[cli]",
  "greenlang[data]",
  "greenlang[analytics]",
  "greenlang[llm]",
  "greenlang[server]",
  "greenlang[security]",
]
all = [
  "greenlang[full]",
  "greenlang[test]",
  "greenlang[dev]",
  "greenlang[doc]",
]

# Removed setuptools_scm - using static version


[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "greenlang*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.md", "*.jinja", "*.bat", "*.ps1"]
"core.greenlang" = [
  "schemas/*.json",
  "data/**/*.json",
  "configs/*.yaml",
  "policy/bundles/**/*",
]
"greenlang" = [
  "schemas/*.json",
  "data/**/*.json",
  "examples/**/*",
]
"greenlang.utils" = [
  "*.py",
]

[tool.black]
line-length = 88
target-version = ["py310"]

[tool.isort]
profile = "black"
line_length = 88

[tool.pytest.ini_options]
# Pytest configuration (duplicates pytest.ini for tool support)
# NOTE: pytest.ini takes precedence if both exist
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# AsyncIO mode for pytest-asyncio (auto discovers async tests)
asyncio_mode = "auto"

# Add coverage reporting to pytest runs
addopts = [
    "-v",                                               # Verbose output
    "--tb=short",                                       # Short traceback format
    "--strict-markers",                                 # Fail on unknown markers
    "--cov=greenlang",                                  # Coverage for main package
    "--cov=core.greenlang",                             # Coverage for core
    "--cov-report=term-missing:skip-covered",           # Terminal report
    "--cov-report=html:.coverage_html",                 # HTML report
    "--cov-report=xml:coverage.xml",                    # XML report for CI
    "--cov-fail-under=80",                              # Fail if coverage < 80%
]

[tool.coverage.run]
# Coverage measurement configuration
branch = true                                            # Measure branch coverage
parallel = true                                          # Support parallel test execution
source = ["greenlang", "core/greenlang"]
omit = [
    "*/tests/*",
    "*/__main__.py",
    "*/conftest.py",                                     # Omit conftest files
    "*/compat/*",
    "*/examples/*",
    "*/cli/templates/*",
    "*/_version.py",
    "*/.venv/*",
    "*/.tox/*",
    "*/site-packages/*",
]

[tool.coverage.report]
# Coverage reporting configuration
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@abstractmethod",
    "except ImportError",
    "except ModuleNotFoundError",
    "pass",
]
precision = 2
show_missing = true
skip_covered = false
fail_under = 80                                          # Enforce 80% coverage minimum

[tool.coverage.html]
directory = ".coverage_html"                             # HTML report directory

[tool.coverage.xml]
output = "coverage.xml"                                  # XML report for CI/CD