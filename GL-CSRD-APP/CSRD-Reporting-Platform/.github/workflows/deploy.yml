name: Deploy

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: greenlang/csrd-app
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.csrd.greenlang.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deployment/k8s/staging/
          kubectl rollout status deployment/csrd-app -n staging

      - name: Run smoke tests
        run: |
          kubectl run smoke-test --image=greenlang/csrd-app:latest --rm -i --restart=Never -- pytest tests/smoke/

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'CSRD App deployed to Staging'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://csrd.greenlang.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Deploy to Kubernetes (Blue-Green)
        run: |
          # Deploy green environment
          kubectl apply -f deployment/k8s/production/

          # Wait for rollout
          kubectl rollout status deployment/csrd-app-green -n production

          # Run health checks
          kubectl run health-check --image=greenlang/csrd-app:latest --rm -i --restart=Never -- python -c "import requests; requests.get('http://csrd-app-green:8000/health').raise_for_status()"

          # Switch traffic (update service selector)
          kubectl patch service csrd-app -n production -p '{"spec":{"selector":{"version":"green"}}}'

          # Keep blue for rollback
          echo "Green deployment complete. Blue kept for rollback."

      - name: Run production smoke tests
        run: |
          kubectl run smoke-test --image=greenlang/csrd-app:latest --rm -i --restart=Never -n production -- pytest tests/smoke/

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'CSRD App deployed to Production ✅'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    needs: deploy-production

    steps:
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Rollback to Blue
        run: |
          kubectl patch service csrd-app -n production -p '{"spec":{"selector":{"version":"blue"}}}'
          echo "Rolled back to blue deployment"

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          text: '⚠️ CSRD App production deployment rolled back'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
