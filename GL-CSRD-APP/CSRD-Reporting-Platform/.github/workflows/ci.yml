name: CSRD Platform CI/CD

on:
  push:
    branches: [ master, develop, 'release/**' ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION_DEFAULT: '3.12'
  PYTEST_WORKERS: 4

jobs:
  # ============================================================================
  # JOB 1: Code Quality & Linting
  # ============================================================================
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black mypy bandit safety

    - name: Run Ruff (Fast Linter)
      run: |
        echo "Running Ruff linter..."
        ruff check . --output-format=github
      continue-on-error: true

    - name: Run Black (Code Formatter Check)
      run: |
        echo "Checking code formatting with Black..."
        black --check --diff .
      continue-on-error: true

    - name: Run MyPy (Type Checking)
      run: |
        echo "Running type checks with MyPy..."
        mypy agents/ cli/ sdk/ provenance/ csrd_pipeline.py --ignore-missing-imports
      continue-on-error: true

  # ============================================================================
  # JOB 2: Security Scanning
  # ============================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit (Security Scanner)
      run: |
        echo "Running Bandit security scanner..."
        bandit -r agents/ cli/ sdk/ provenance/ csrd_pipeline.py -f json -o bandit-report.json
        bandit -r agents/ cli/ sdk/ provenance/ csrd_pipeline.py
      continue-on-error: true

    - name: Run Safety (Dependency Vulnerability Scanner)
      run: |
        echo "Scanning dependencies for known vulnerabilities..."
        pip install -r requirements.txt
        safety check --json > safety-report.json || true
        safety check
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # ============================================================================
  # JOB 3: Unit Tests (Multi-Python Version)
  # ============================================================================
  test:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-timeout

    - name: Run unit tests
      run: |
        echo "Running test suite with Python ${{ matrix.python-version }} on ${{ matrix.os }}..."
        pytest tests/ -v --tb=short --maxfail=5 -n ${{ env.PYTEST_WORKERS }} --timeout=300
      timeout-minutes: 30

    - name: Generate coverage report
      if: matrix.python-version == env.PYTHON_VERSION_DEFAULT && matrix.os == 'ubuntu-latest'
      run: |
        echo "Generating coverage report..."
        pytest tests/ --cov --cov-report=xml --cov-report=html --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.python-version == env.PYTHON_VERSION_DEFAULT && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports
      if: matrix.python-version == env.PYTHON_VERSION_DEFAULT && matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
        retention-days: 30

  # ============================================================================
  # JOB 4: Integration Tests
  # ============================================================================
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-timeout

    - name: Run integration tests
      run: |
        echo "Running pipeline integration tests..."
        pytest tests/test_pipeline_integration.py -v --tb=short --timeout=600
      timeout-minutes: 15
      env:
        INTEGRATION_TEST: 'true'

  # ============================================================================
  # JOB 5: Performance Benchmarks
  # ============================================================================
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run benchmarks
      run: |
        echo "Running performance benchmarks..."
        python scripts/benchmark.py --dataset-size medium --agents all
      timeout-minutes: 20

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark_results_*.json
        retention-days: 90

  # ============================================================================
  # JOB 6: Documentation Build
  # ============================================================================
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material

    - name: Verify markdown files
      run: |
        echo "Verifying markdown files..."
        find . -name "*.md" -type f | while read file; do
          echo "Checking $file"
          # Basic markdown validation (no broken links in this simple check)
        done

    - name: Check example notebooks
      run: |
        echo "Checking Jupyter notebooks..."
        pip install nbconvert jupyter
        find examples/ -name "*.ipynb" -type f | while read notebook; do
          echo "Validating $notebook"
          jupyter nbconvert --to notebook --execute --inplace "$notebook" || true
        done

  # ============================================================================
  # JOB 7: Build Distribution Packages
  # ============================================================================
  build:
    name: Build Distribution Packages
    runs-on: ubuntu-latest
    needs: [lint, test, security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools

    - name: Build source and wheel distributions
      run: |
        echo "Building distribution packages..."
        python -m build

    - name: Check distribution packages
      run: |
        echo "Checking distribution packages with twine..."
        twine check dist/*

    - name: Upload distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 90

  # ============================================================================
  # JOB 8: Docker Image Build (if Dockerfile exists)
  # ============================================================================
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for Dockerfile
      id: check_dockerfile
      run: |
        if [ -f "Dockerfile" ]; then
          echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
        else
          echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Set up Docker Buildx
      if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: csrd-platform:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ============================================================================
  # JOB 9: Release (on tags)
  # ============================================================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint, test, security, build]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

    - name: Download distribution packages
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to PyPI (optional)
      # Uncomment and configure if you want to publish to PyPI
      # run: |
      #   pip install twine
      #   twine upload dist/* --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}
      run: echo "PyPI publishing disabled (configure secrets.PYPI_API_TOKEN to enable)"

  # ============================================================================
  # JOB 10: Notification
  # ============================================================================
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, test, security, build]
    if: always()

    steps:
    - name: Send status notification
      run: |
        echo "Pipeline Status:"
        echo "  Lint: ${{ needs.lint.result }}"
        echo "  Test: ${{ needs.test.result }}"
        echo "  Security: ${{ needs.security.result }}"
        echo "  Build: ${{ needs.build.result }}"

        if [ "${{ needs.lint.result }}" = "success" ] && \
           [ "${{ needs.test.result }}" = "success" ] && \
           [ "${{ needs.security.result }}" = "success" ] && \
           [ "${{ needs.build.result }}" = "success" ]; then
          echo "✅ All checks passed!"
        else
          echo "❌ Some checks failed"
          exit 1
        fi
