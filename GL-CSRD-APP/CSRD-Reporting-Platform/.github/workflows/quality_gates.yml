name: Quality Gates

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint black isort mypy bandit safety

      - name: Run Black (Code Formatting)
        run: |
          black --check agents/ cli/ sdk/ provenance/ utils/ connectors/ || echo "::warning::Code formatting issues found"

      - name: Run isort (Import Sorting)
        run: |
          isort --check-only agents/ cli/ sdk/ provenance/ utils/ connectors/ || echo "::warning::Import sorting issues found"

      - name: Run Pylint (Linting)
        run: |
          pylint agents/ cli/ sdk/ provenance/ utils/ connectors/ --exit-zero --output-format=text | tee pylint-report.txt
          score=$(tail -2 pylint-report.txt | grep -oP 'rated at \K[0-9.]+')
          echo "Pylint Score: $score/10"

      - name: Run MyPy (Type Checking)
        run: |
          mypy agents/ cli/ sdk/ provenance/ utils/ connectors/ --ignore-missing-imports || echo "::warning::Type checking issues found"

      - name: Upload lint reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lint-reports
          path: pylint-report.txt

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Run Bandit (Security Scan)
        run: |
          bandit -r agents/ cli/ sdk/ provenance/ utils/ connectors/ -f json -o bandit-report.json || true

      - name: Run Safety (Dependency Check)
        run: |
          safety check --json > safety-report.json || true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  schema-validation:
    name: Schema Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema pyyaml

      - name: Validate JSON Schemas
        run: |
          python scripts/validate_schemas.py

      - name: Validate YAML Files
        run: |
          python -c "import yaml; import sys; [yaml.safe_load(open(f)) for f in ['config/csrd_config.yaml', 'data/esrs_formulas.yaml', 'rules/esrs_compliance_rules.yaml']]"

  performance-check:
    name: Performance Benchmarks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Performance Benchmarks
        run: |
          python scripts/benchmark.py > benchmark-results.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.txt

  quality-gate-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, schema-validation, performance-check]
    if: always()

    steps:
      - name: Quality Gate Status
        run: |
          echo "### Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Schema Validation: ${{ needs.schema-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Check: ${{ needs.performance-check.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Fail if any gate failed
        if: needs.code-quality.result == 'failure' || needs.security-scan.result == 'failure' || needs.schema-validation.result == 'failure'
        run: exit 1
