name: Security Scanning Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggers

jobs:
  security-scan:
    name: Comprehensive Security Scan
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write  # For uploading SARIF results

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install security tools
        run: |
          pip install bandit safety semgrep

      - name: Run Bandit (Python Security Scanner)
        id: bandit
        run: |
          bandit -r agents utils -f json -o bandit_report.json -ll --exit-zero
          echo "‚úì Bandit scan completed"
        continue-on-error: true

      - name: Run Safety (Dependency Vulnerability Scanner)
        id: safety
        run: |
          safety check --json --output safety_report.json --continue-on-error || true
          echo "‚úì Safety scan completed"
        continue-on-error: true

      - name: Run Semgrep (Advanced SAST)
        id: semgrep
        run: |
          semgrep --config=auto --json --output semgrep_report.json agents utils || true
          echo "‚úì Semgrep scan completed"
        continue-on-error: true

      - name: Run comprehensive security scan
        id: security-scan
        run: |
          python security_scan.py .
        continue-on-error: true

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit_report.json
          retention-days: 30

      - name: Upload Safety results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-report
          path: safety_report.json
          retention-days: 30

      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-report
          path: semgrep_report.json
          retention-days: 30

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-summary
          path: security_summary.json
          retention-days: 90

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read security summary
            let summary = { summary: { overall_status: 'UNKNOWN' } };
            try {
              summary = JSON.parse(fs.readFileSync('security_summary.json', 'utf8'));
            } catch (e) {
              console.log('Could not read security summary');
            }

            const status = summary.summary.overall_status;
            const critical = summary.summary.critical_issues || 0;
            const high = summary.summary.high_issues || 0;
            const medium = summary.summary.medium_issues || 0;

            const icon = status === 'PASS' ? '‚úÖ' : '‚ùå';

            const body = `## ${icon} Security Scan Results

            **Overall Status:** ${status}

            ### Issue Summary
            - üî¥ **CRITICAL:** ${critical}
            - üü† **HIGH:** ${high}
            - üü° **MEDIUM:** ${medium}

            ${status === 'FAIL' ? '‚ö†Ô∏è **Action Required:** Security issues detected. Please review the scan reports.' : '‚úÖ No critical security issues detected.'}

            View detailed reports in the workflow artifacts.
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Check for critical issues
        run: |
          # Read security summary and check for failures
          if [ -f security_summary.json ]; then
            STATUS=$(python -c "import json; print(json.load(open('security_summary.json'))['summary']['overall_status'])")
            if [ "$STATUS" = "FAIL" ]; then
              echo "‚ùå Security scan failed - critical issues found"
              exit 1
            fi
          fi
          echo "‚úÖ Security scan passed"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
