# ============================================================================
# AGENT SPECIFICATION: ESRS METRICS CALCULATOR AGENT
# AgentSpec V2.0 Compliant
# ============================================================================

# ----------------------------------------------------------------------------
# SECTION 1: AGENT METADATA
# ----------------------------------------------------------------------------
agent_metadata:
  agent_id: "csrd_calculator_agent"
  agent_name: "CalculatorAgent"
  display_name: "ESRS Metrics Calculator Agent"
  version: "1.1.0"
  domain: "CSRD/ESG Reporting"
  subdomain: "Metrics Calculation"
  agent_type: "calculator"
  complexity: "high"
  priority: "critical"
  status: "production"
  deterministic: true
  llm_usage: false
  zero_hallucination: true

# ----------------------------------------------------------------------------
# SECTION 2: DESCRIPTION
# ----------------------------------------------------------------------------
description:
  purpose: |
    Calculate all ESRS metrics with ZERO HALLUCINATION guarantee using only
    database lookups and deterministic arithmetic. NO AI estimation.

  strategic_context:
    global_impact: "Supports CSRD compliance for 50,000+ EU companies requiring accurate ESG metrics"
    opportunity: "Automate 500+ metric calculations with 100% accuracy and reproducibility"
    market_size: "EU CSRD compliance market estimated at €5B annually"
    technology_maturity: "TRL 9 (Proven technology in operational environment)"

  capabilities:
    - "Calculate metrics for 10 ESRS topical standards (E1-E5, S1-S4, G1)"
    - "Execute 500+ deterministic metric formulas"
    - "GHG emissions calculations per GHG Protocol (Scope 1, 2, 3)"
    - "Social & governance metrics calculation"
    - "Environmental indicators calculation"
    - "100% deterministic, bit-perfect reproducibility"
    - "Complete calculation provenance tracking"

  key_features:
    - "ZERO HALLUCINATION GUARANTEE - no AI estimation"
    - "100% Deterministic (database + arithmetic only)"
    - "Bit-perfect reproducibility across all environments"
    - "<5 ms per metric calculation"
    - "Complete audit trail for all calculations"
    - "No LLM usage - pure mathematics and database lookups"

  dependencies:
    - agent_id: "intake_agent"
      relationship: "receives_data_from"
      data: "validated_esg_data"
    - agent_id: "materiality_agent"
      relationship: "receives_data_from"
      data: "materiality_matrix"
    - agent_id: "aggregator_agent"
      relationship: "provides_data_to"
      data: "calculated_metrics"
    - agent_id: "audit_agent"
      relationship: "provides_data_to"
      data: "calculation_audit_trail"

  critical_constraints:
    - "NO AI/LLM usage"
    - "NO estimation or approximation"
    - "NO external API calls (except database lookups)"
    - "ONLY database lookups and Python arithmetic"
    - "100% reproducible results (same input = same output, always)"

# ----------------------------------------------------------------------------
# INPUTS
# ----------------------------------------------------------------------------
inputs:
  primary_inputs:
    - name: "validated_esg_data"
      type: "json"
      required: true
      source: "Output from IntakeAgent"
      description: "Validated ESG data points"

    - name: "materiality_matrix"
      type: "json"
      required: true
      source: "Output from MaterialityAgent"
      description: "Determines which standards to calculate"

  reference_databases:
    - name: "emission_factors_db"
      path: "data/emission_factors.json"
      description: "GHG Protocol emission factors"
      usage: "Database lookups for Scope 1, 2, 3 calculations"
      zero_hallucination: true

    - name: "esrs_formulas"
      path: "data/esrs_formulas.yaml"
      description: "500+ ESRS metric calculation formulas"
      usage: "Deterministic formula execution"
      zero_hallucination: true

# ----------------------------------------------------------------------------
# OUTPUTS
# ----------------------------------------------------------------------------
outputs:
  - name: "calculated_metrics"
    format: "json"
    description: "All calculated ESRS metrics"
    structure:
      metadata:
        total_metrics_calculated: "integer"
        calculation_time_ms: "float"
        standards_covered: "array of ESRS standards"
      metrics:
        - metric_code: "string (e.g., E1-1)"
          metric_name: "string"
          value: "number"
          unit: "string"
          calculation_method: "string"
          formula: "string"
          inputs: "array of input values"
          provenance:
            source: "string"
            timestamp: "ISO8601"
            version: "string"

  - name: "calculation_audit_trail"
    format: "json"
    description: "Complete calculation provenance"
    structure:
      calculations:
        - metric_code: "string"
          formula: "string"
          inputs: "object with named values"
          intermediate_steps: "array of calculation steps"
          output: "final value"
          timestamp: "ISO8601"
          data_sources: "array of source references"

# ----------------------------------------------------------------------------
# SECTION 3: TOOLS
# ----------------------------------------------------------------------------
tools:
  tools_list:
    - tool_id: "emission_factor_lookup"
      name: "emission-factor-lookup"
      deterministic: true
      category: "lookup"
      description: "Retrieve GHG emission factors from database"

      parameters:
        type: "object"
        properties:
          fuel_type: {type: "string", description: "Fuel type (natural_gas, diesel, etc.)"}
          region: {type: "string", description: "Geographic region"}
        required: ["fuel_type"]

      returns:
        type: "object"
        properties:
          emission_factor: {type: "number", description: "kgCO2e per unit"}
          unit: {type: "string", description: "Unit of measurement"}
          source: {type: "string", description: "EPA/GHG Protocol/IPCC"}

      implementation:
        method: "Database hash lookup"
        database: "data/emission_factors.json"
        calculation_method: "Direct dictionary lookup"
        accuracy: "100% deterministic"
        validation: "Tested against EPA official factors"
        standards: ["GHG Protocol Corporate Standard", "EPA Emission Factors Hub"]

    - tool_id: "scope1_calculator"
      name: "scope1-calculator"
      deterministic: true
      category: "calculation"
      description: "Calculate Scope 1 GHG emissions"

      parameters:
        type: "object"
        properties:
          fuel_consumption: {type: "array", description: "Array of fuel usage"}
          fuel_types: {type: "array", description: "Corresponding fuel types"}
        required: ["fuel_consumption", "fuel_types"]

      returns:
        type: "object"
        properties:
          scope1_total: {type: "number", description: "Total Scope 1 in tCO2e"}
          breakdown: {type: "array", description: "Per-fuel calculations"}
          formula_used: {type: "string", description: "Calculation formula"}

      implementation:
        physics_formula: "Scope1 = SUM(fuel_consumption[i] × emission_factor[fuel_type[i]])"
        calculation_method: "Direct multiplication per GHG Protocol"
        data_source: "EPA Emission Factors Hub"
        accuracy: "100% deterministic"
        validation: "Unit tests with known benchmark values"
        standards: ["GHG Protocol Corporate Standard", "ISO 14064-1"]

    - tool_id: "scope2_calculator"
      name: "scope2-calculator"
      deterministic: true
      category: "calculation"
      description: "Calculate Scope 2 GHG emissions (location-based)"

      parameters:
        type: "object"
        properties:
          electricity_purchased: {type: "array", description: "Electricity by region (kWh)"}
          regions: {type: "array", description: "Geographic regions"}
        required: ["electricity_purchased", "regions"]

      returns:
        type: "object"
        properties:
          scope2_total: {type: "number", description: "Total Scope 2 in tCO2e"}
          breakdown: {type: "array", description: "Per-region calculations"}

      implementation:
        physics_formula: "Scope2 = SUM(electricity_purchased[i] × grid_factor[region[i]])"
        calculation_method: "Location-based method per GHG Protocol Scope 2 Guidance"
        data_source: "IEA grid emission factors"
        accuracy: "100% deterministic"
        validation: "Tested with IEA reference data"
        standards: ["GHG Protocol Scope 2 Guidance", "IEA Grid Factors"]

    - tool_id: "ghg_intensity_calculator"
      name: "ghg-intensity-calculator"
      deterministic: true
      category: "calculation"
      description: "Calculate GHG intensity metrics"

      parameters:
        type: "object"
        properties:
          total_ghg: {type: "number", description: "Total GHG emissions (tCO2e)"}
          denominator: {type: "number", description: "Revenue or output"}
          denominator_type: {type: "string", description: "revenue_eur|units_produced"}
        required: ["total_ghg", "denominator"]

      returns:
        type: "object"
        properties:
          intensity: {type: "number", description: "Intensity ratio"}
          unit: {type: "string", description: "tCO2e per EUR million / unit"}

      implementation:
        physics_formula: "Intensity = total_ghg / (denominator / scaling_factor)"
        calculation_method: "Direct division"
        data_source: "Calculated metrics + company data"
        accuracy: "100% deterministic"
        validation: "Unit tests with known values"
        standards: ["GHG Protocol", "ESRS E1"]

    - tool_id: "formula_engine"
      name: "formula-engine"
      deterministic: true
      category: "calculation"
      description: "Execute calculation formulas from YAML database"

      parameters:
        type: "object"
        properties:
          metric_code: {type: "string", description: "ESRS metric code"}
          input_data: {type: "object", description: "Required inputs"}
        required: ["metric_code", "input_data"]

      returns:
        type: "object"
        properties:
          value: {type: "number", description: "Calculated value"}
          formula: {type: "string", description: "Formula used"}
          intermediate_steps: {type: "array", description: "Calculation steps"}

      implementation:
        method: "YAML formula parsing and execution"
        formula_database: "data/esrs_formulas.yaml"
        calculation_method: "Safe evaluation of mathematical expressions"
        accuracy: "100% deterministic"
        validation: "Tested with 500+ formula executions"
        standards: ["ESRS Set 1"]

    - tool_id: "provenance_tracker"
      name: "provenance-tracker"
      deterministic: true
      category: "logging"
      description: "Track complete calculation lineage"

      parameters:
        type: "object"
        properties:
          metric_code: {type: "string", description: "Metric being calculated"}
          inputs: {type: "object", description: "Input values"}
          formula: {type: "string", description: "Formula used"}
          result: {type: "number", description: "Final result"}
        required: ["metric_code", "inputs", "formula", "result"]

      returns:
        type: "object"
        properties:
          audit_record: {type: "object", description: "Complete provenance record"}

      implementation:
        method: "Structured logging"
        calculation_method: "Record all inputs, formula, steps, and output"
        data_source: "Runtime calculation data"
        accuracy: "100% deterministic"
        validation: "Audit log verification"
        standards: ["ISO 14064-1 (Provenance Requirements)"]

# ----------------------------------------------------------------------------
# SECTION 4: AI INTEGRATION
# ----------------------------------------------------------------------------
ai_integration:
  enabled: false
  model: "N/A - Deterministic calculator agent"
  temperature: 0.0  # MUST be exactly 0.0
  seed: 42  # MUST be exactly 42
  provenance_tracking: true
  tool_choice: "N/A"
  max_iterations: 0
  budget_usd: 0.0
  rationale: "This is a deterministic calculation agent with ZERO AI/LLM usage. All metrics calculated via exact formulas and database lookups only."
  zero_hallucination_guarantee: true

# ----------------------------------------------------------------------------
# SECTION 5: SUB-AGENTS
# ----------------------------------------------------------------------------
sub_agents:
  enabled: false
  coordination_pattern: "N/A"
  sub_agent_list: []
  rationale: "This is a leaf-level agent with no sub-agents"

# ----------------------------------------------------------------------------
# PROCESSING WORKFLOW
# ----------------------------------------------------------------------------
processing_workflow:
  step_1_scope_determination:
    name: "Determine Calculation Scope"
    description: "Identify which metrics to calculate based on materiality"
    method: "Deterministic"
    logic: |
      FOR each ESRS standard IN material_standards:
        load_formulas_for_standard(standard)
        add_to_calculation_queue(formulas)

  step_2_dependency_resolution:
    name: "Resolve Calculation Dependencies"
    description: "Order calculations based on dependencies"
    method: "Deterministic - Topological sort"
    example: |
      E1-4 (Total GHG) depends on E1-1, E1-2, E1-3
      → Calculate E1-1, E1-2, E1-3 first, then E1-4

  step_3_emission_factor_lookups:
    name: "Emission Factor Database Lookups"
    description: "Retrieve emission factors for GHG calculations"
    method: "Database lookup - ZERO HALLUCINATION"
    process: |
      FOR each emission source:
        emission_factor = emission_factors_db[fuel_type][region]
        IF emission_factor NOT FOUND:
          use_default_factor_with_flag()
          add_warning("Default factor used")
    zero_hallucination: true

  step_4_formula_execution:
    name: "Execute Calculation Formulas"
    description: "Run deterministic arithmetic"
    method: "Python arithmetic - ZERO HALLUCINATION"
    operations_allowed:
      - "Addition: a + b"
      - "Subtraction: a - b"
      - "Multiplication: a × b"
      - "Division: a / b (with zero-division check)"
      - "Rounding: round(x, decimals)"
      - "Sum: SUM(array)"
      - "Count: COUNT(array)"
      - "Min/Max: MIN(array), MAX(array)"
    operations_forbidden:
      - "Random numbers"
      - "AI/LLM calls"
      - "External API calls"
      - "Estimation functions"
    zero_hallucination: true

  step_5_scope1_ghg_calculation:
    name: "Scope 1 GHG Emissions"
    formula: "SUM(fuel_consumption[i] × emission_factor[fuel_type[i]])"
    inputs:
      - "fuel_consumption (array)"
      - "fuel_type (array)"
      - "emission_factor_db"
    example: |
      natural_gas: 100,000 kWh × 0.18396 kgCO2e/kWh = 18,396 kgCO2e = 18.4 tCO2e
      diesel: 5,000 L × 2.68 kgCO2e/L = 13,400 kgCO2e = 13.4 tCO2e
      Total Scope 1 = 18.4 + 13.4 = 31.8 tCO2e
    zero_hallucination: true

  step_6_scope2_ghg_calculation:
    name: "Scope 2 GHG Emissions (Location-Based)"
    formula: "SUM(electricity_purchased[i] × grid_factor[region[i]])"
    inputs:
      - "electricity_purchased (kWh by region)"
      - "grid_emission_factors"
    example: |
      Germany: 50,000 MWh × 0.420 kgCO2e/kWh × 1000 = 21,000 tCO2e
      France: 20,000 MWh × 0.057 kgCO2e/kWh × 1000 = 1,140 tCO2e
      Total Scope 2 = 21,000 + 1,140 = 22,140 tCO2e
    zero_hallucination: true

  step_7_scope3_ghg_calculation:
    name: "Scope 3 GHG Emissions"
    formula: "SUM(scope3_category[i]) for 15 categories"
    methods:
      - "Spend-based: spend × emission_factor[category]"
      - "Average-data: activity × industry_average_factor"
      - "Supplier-specific: use supplier-provided data"
    note: "Scope 3 often uses estimation - document method and uncertainty"
    zero_hallucination: "Partial - formulas are deterministic, but input data may be estimated"

  step_8_calculation_verification:
    name: "Verify Calculations"
    description: "Cross-check calculated totals"
    checks:
      - "Total GHG = Scope1 + Scope2 + Scope3 (within tolerance)"
      - "Total Energy = Renewable + Non-renewable"
      - "Total Waste = Hazardous + Non-hazardous"
      - "% calculations are between 0 and 100"
      - "Negative values only for delta metrics"
    tolerance: 0.01  # 1% for rounding errors

  step_9_provenance_tracking:
    name: "Track Calculation Provenance"
    description: "Document complete data lineage"
    for_each_calculation:
      record:
        - "Formula used"
        - "Input values with sources"
        - "Intermediate calculation steps"
        - "Final result"
        - "Timestamp"
        - "Emission factors used (with source)"
        - "Data quality flags"

  step_10_output_generation:
    name: "Generate Outputs"
    outputs:
      - "calculated_metrics.json"
      - "calculation_audit_trail.json"

# ----------------------------------------------------------------------------
# EXAMPLE FORMULAS
# ----------------------------------------------------------------------------
example_formulas:
  E1-1_scope1:
    formula: "SUM(stationary_combustion + mobile_combustion + process_emissions + fugitive_emissions)"
    zero_hallucination: true

  E1-4_total_ghg:
    formula: "E1-1 + E1-2 + E1-3"
    zero_hallucination: true

  E1-7_renewable_percentage:
    formula: "(E1-6 / E1-5) × 100"
    zero_hallucination: true

  E1-8_ghg_intensity:
    formula: "E1-4 / (revenue_eur / 1000000)"
    unit: "tCO2e per EUR million"
    zero_hallucination: true

  E5-5_recycling_rate:
    formula: "(E5-4 / E5-1) × 100"
    zero_hallucination: true

  S1-5_turnover_rate:
    formula: "(employee_departures / average_workforce) × 100"
    zero_hallucination: true

  S1-10_ltifr:
    formula: "(lost_time_injuries / total_hours_worked) × 1000000"
    unit: "per million hours"
    zero_hallucination: true

# ----------------------------------------------------------------------------
# SECTION 6: TESTING
# ----------------------------------------------------------------------------
testing:
  test_coverage_target: 0.80

  test_categories:
    - category: "unit_tests"
      description: "Test individual calculation formulas"
      count: 50
      examples:
        - "test_scope1_ghg_calculation"
        - "test_scope2_location_based"
        - "test_emission_factor_lookup"
        - "test_energy_intensity_formula"
        - "test_social_metrics_calculation"
        - "test_governance_metrics_calculation"

    - category: "integration_tests"
      description: "Test full calculation workflows"
      count: 10
      examples:
        - "test_full_e1_climate_calculations"
        - "test_multi_standard_calculation"
        - "test_dependency_resolution"
        - "test_complete_csrd_metric_set"

    - category: "determinism_tests"
      description: "Verify 100% reproducibility"
      count: 10
      examples:
        - "test_same_input_same_output_1000_runs"
        - "test_calculation_reproducibility_across_environments"
        - "test_floating_point_consistency"
        - "test_bit_perfect_reproducibility"
      requirement: "MUST pass 100% - bit-perfect reproducibility"

    - category: "boundary_tests"
      description: "Test edge cases and error handling"
      count: 15
      examples:
        - "test_zero_values"
        - "test_missing_emission_factors"
        - "test_division_by_zero_handling"
        - "test_large_values_no_overflow"
        - "test_negative_value_rejection"
        - "test_invalid_input_types"

  performance_requirements:
    max_latency_ms: 3000  # 3 seconds for all 500+ metrics
    max_cost_usd: 0.0
    accuracy_target: 1.0  # 100% accuracy - deterministic
    throughput: "200+ metrics/sec"

# ----------------------------------------------------------------------------
# SECTION 7: DEPLOYMENT
# ----------------------------------------------------------------------------
deployment:
  pack_id: "csrd/calculator_agent"
  pack_version: "1.1.0"

  resource_requirements:
    memory_mb: 512
    cpu_cores: 2
    gpu_required: false
    storage_mb: 100

  dependencies:
    python_packages:
      - "pandas>=2.0,<3.0"
      - "numpy>=1.24,<2.0"
      - "pydantic>=2.0,<3.0"
      - "pyyaml>=6.0,<7.0"

    greenlang_modules:
      - "greenlang.agents.base"
      - "greenlang.core.schemas"
      - "greenlang.core.validation"

  api_endpoints:
    - endpoint: "/api/v1/csrd/calculator/execute"
      method: "POST"
      authentication: "required"
      rate_limit: "100 req/min"

  environment_config:
    - name: "EMISSION_FACTORS_DB_PATH"
      required: true
      description: "Path to emission factors database"
    - name: "ESRS_FORMULAS_PATH"
      required: true
      description: "Path to ESRS formulas YAML file"

# ----------------------------------------------------------------------------
# SECTION 8: DOCUMENTATION
# ----------------------------------------------------------------------------
documentation:
  readme_path: "docs/agents/calculator_agent/README.md"
  api_docs_path: "docs/agents/calculator_agent/API.md"

  example_use_cases:
    - title: "GHG Emissions Calculation"
      description: "Calculate Scope 1, 2, 3 emissions for manufacturing company"
      input_example:
        validated_esg_data:
          natural_gas_kwh: 100000
          grid_electricity_kwh: 50000
          scope3_estimate: 150000
      output_example:
        E1-1: 18.4  # tCO2e
        E1-2: 21.0  # tCO2e
        E1-3: 150.0
        E1-4: 189.4
      output_summary: "Total GHG: 189.4 tCO2e with complete audit trail"

    - title: "Full E1 Climate Standard Metrics"
      description: "Calculate all E1 metrics for annual report"
      input_example:
        materiality_matrix:
          material_topics: ["E1"]
      output_summary: "50+ E1 metrics calculated in <1 second"

    - title: "Social Metrics (S1) Calculation"
      description: "Calculate workforce metrics"
      input_example:
        workforce_data:
          total_employees: 1000
          departures: 150
          injuries: 5
      output_summary: "15% turnover rate, LTIFR calculated"

  guides:
    - "Getting Started with CalculatorAgent"
    - "Understanding Calculation Formulas"
    - "GHG Protocol Implementation Guide"
    - "Troubleshooting Calculation Errors"

# ----------------------------------------------------------------------------
# SECTION 9: COMPLIANCE
# ----------------------------------------------------------------------------
compliance:
  zero_secrets: true

  standards:
    - "GHG Protocol Corporate Standard"
    - "ISO 14064-1:2018 (GHG quantification)"
    - "ESRS E1 Climate Change"
    - "ESRS E2-E5 (Environmental)"
    - "ESRS S1-S4 (Social)"
    - "ESRS G1 (Governance)"

  security:
    secret_scanning: "GL-SecScan validated"
    vulnerability_scanning: "pip-audit clean"
    sbom_generated: true
    code_signing: false

  data_privacy:
    pii_handling: "No PII processed"
    data_retention: "As per company policy"
    encryption: "Data in transit: TLS 1.3"

  zero_hallucination_guarantee: true

# ----------------------------------------------------------------------------
# QUALITY GUARANTEES
# ----------------------------------------------------------------------------
guarantees:
  zero_hallucination: true
  deterministic: true
  reproducible: "100% bit-perfect"
  audit_trail: "complete"
  calculation_accuracy: "100%"

  verification:
    - "All calculations can be reproduced by hand"
    - "Same inputs always produce same outputs"
    - "No randomness or estimation"
    - "Complete provenance for audit"

# ----------------------------------------------------------------------------
# ERROR HANDLING
# ----------------------------------------------------------------------------
error_handling:
  missing_input_data:
    action: "Flag metric as unable to calculate"
    error_message: "Missing required input: {field_name}"
    continue_processing: true

  division_by_zero:
    action: "Return null, add error flag"
    error_message: "Division by zero in {metric_code}"

  missing_emission_factor:
    action: "Use default if available, otherwise flag error"
    warning_message: "Emission factor not found for {fuel_type}, using default"

  calculation_overflow:
    action: "Flag error, check input data"
    error_message: "Calculation overflow in {metric_code}"

# ----------------------------------------------------------------------------
# PERFORMANCE TARGETS
# ----------------------------------------------------------------------------
performance:
  throughput: "200+ metrics/sec"
  latency_per_metric: "<5 ms"
  memory_footprint: "<500 MB"
  parallel_processing: "Multi-threaded for independent calculations"

# ----------------------------------------------------------------------------
# SECTION 10: METADATA (Version Control & Changelog)
# ----------------------------------------------------------------------------
metadata:
  created_date: "2025-10-18"
  last_modified: "2025-10-18"
  review_status: "Upgraded to AgentSpec V2.0"

  authors:
    - name: "CSRD Platform Team"
      role: "Development"

  reviewers:
    - name: "Head of AI & Climate Intelligence"
      role: "Technical Review"
      status: "Pending"

  change_log:
    - version: "1.1.0"
      date: "2025-10-18"
      changes: "Upgraded to AgentSpec V2.0 compliance - Added agent_metadata, enhanced description, upgraded tools section, added ai_integration, sub_agents, testing, deployment, documentation, compliance, and metadata sections"
      author: "CSRD Platform Team"
      breaking_changes: false

    - version: "1.0.0"
      date: "2025-10-18"
      changes: "Initial production release with deterministic calculation engine"
      author: "CSRD Platform Team"
      breaking_changes: false
