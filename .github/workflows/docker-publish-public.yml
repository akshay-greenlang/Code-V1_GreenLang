name: Publish Public Docker Images

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.0)'
        required: true
        default: '0.3.0'
        type: string
      force_rebuild:
        description: 'Force rebuild even if images exist'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  DOCKERHUB_ORG: greenlang

jobs:
  publish-public:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # Required for OIDC/keyless signing with cosign
      security-events: write  # Required for uploading security scan results

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU for multi-arch
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Docker Hub login for public distribution
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version metadata
        id: meta
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MAJOR_MINOR=$(echo $VERSION | cut -d. -f1,2)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "MAJOR_MINOR=$MAJOR_MINOR" >> $GITHUB_OUTPUT
          echo "DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          echo "SHA=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          echo "FULL_SHA=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      # Build and push RUNNER image
      - name: Build and push runner image
        id: build-runner
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.runner
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            GL_VERSION=${{ steps.meta.outputs.VERSION }}
            BUILD_DATE=${{ steps.meta.outputs.DATE }}
            VCS_REF=${{ steps.meta.outputs.FULL_SHA }}
            VERSION=${{ steps.meta.outputs.VERSION }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.MAJOR_MINOR }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:latest
            ${{ env.DOCKERHUB_ORG }}/core-runner:${{ steps.meta.outputs.VERSION }}
            ${{ env.DOCKERHUB_ORG }}/core-runner:${{ steps.meta.outputs.MAJOR_MINOR }}
            ${{ env.DOCKERHUB_ORG }}/core-runner:latest
          labels: |
            org.opencontainers.image.title=GreenLang Runner
            org.opencontainers.image.description=Minimal production runtime for GreenLang pipelines
            org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}
            org.opencontainers.image.created=${{ steps.meta.outputs.DATE }}
            org.opencontainers.image.revision=${{ steps.meta.outputs.FULL_SHA }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.vendor=GreenLang Team
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:buildcache,mode=max

      # Build and push FULL image
      - name: Build and push full image
        id: build-full
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.full
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            GL_VERSION=${{ steps.meta.outputs.VERSION }}
            BUILD_DATE=${{ steps.meta.outputs.DATE }}
            VCS_REF=${{ steps.meta.outputs.FULL_SHA }}
            VERSION=${{ steps.meta.outputs.VERSION }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.MAJOR_MINOR }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:latest
            ${{ env.DOCKERHUB_ORG }}/core-full:${{ steps.meta.outputs.VERSION }}
            ${{ env.DOCKERHUB_ORG }}/core-full:${{ steps.meta.outputs.MAJOR_MINOR }}
            ${{ env.DOCKERHUB_ORG }}/core-full:latest
          labels: |
            org.opencontainers.image.title=GreenLang Full
            org.opencontainers.image.description=Developer/CI image with build tools for GreenLang
            org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}
            org.opencontainers.image.created=${{ steps.meta.outputs.DATE }}
            org.opencontainers.image.revision=${{ steps.meta.outputs.FULL_SHA }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.vendor=GreenLang Team
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:buildcache,mode=max

      # Install Cosign for signing
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.6.0
        with:
          cosign-release: 'v2.2.4'

      # Sign images with Cosign (keyless using OIDC)
      - name: Sign runner images
        run: |
          # Sign GHCR images
          cosign sign --yes \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }}@${{ steps.build-runner.outputs.digest }}

          # Sign Docker Hub images
          cosign sign --yes \
            ${{ env.DOCKERHUB_ORG }}/core-runner:${{ steps.meta.outputs.VERSION }}@${{ steps.build-runner.outputs.digest }}

      - name: Sign full images
        run: |
          # Sign GHCR images
          cosign sign --yes \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.VERSION }}@${{ steps.build-full.outputs.digest }}

          # Sign Docker Hub images
          cosign sign --yes \
            ${{ env.DOCKERHUB_ORG }}/core-full:${{ steps.meta.outputs.VERSION }}@${{ steps.build-full.outputs.digest }}

      # Generate SBOM with Syft
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.15.0

      - name: Generate SBOM for runner image
        run: |
          syft ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }} \
            -o spdx-json=sbom-runner-${{ steps.meta.outputs.VERSION }}.spdx.json

      - name: Generate SBOM for full image
        run: |
          syft ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.VERSION }} \
            -o spdx-json=sbom-full-${{ steps.meta.outputs.VERSION }}.spdx.json

      # Attach SBOMs to images
      - name: Attach SBOM to runner image
        run: |
          # Attach SBOM to GHCR image
          cosign attach sbom \
            --sbom sbom-runner-${{ steps.meta.outputs.VERSION }}.spdx.json \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }}@${{ steps.build-runner.outputs.digest }}

          # Attach SBOM to Docker Hub image
          cosign attach sbom \
            --sbom sbom-runner-${{ steps.meta.outputs.VERSION }}.spdx.json \
            ${{ env.DOCKERHUB_ORG }}/core-runner:${{ steps.meta.outputs.VERSION }}@${{ steps.build-runner.outputs.digest }}

      - name: Attach SBOM to full image
        run: |
          # Attach SBOM to GHCR image
          cosign attach sbom \
            --sbom sbom-full-${{ steps.meta.outputs.VERSION }}.spdx.json \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.VERSION }}@${{ steps.build-full.outputs.digest }}

          # Attach SBOM to Docker Hub image
          cosign attach sbom \
            --sbom sbom-full-${{ steps.meta.outputs.VERSION }}.spdx.json \
            ${{ env.DOCKERHUB_ORG }}/core-full:${{ steps.meta.outputs.VERSION }}@${{ steps.build-full.outputs.digest }}

      # Upload SBOMs as artifacts
      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: sboms-${{ steps.meta.outputs.VERSION }}
          path: |
            sbom-*.json
          retention-days: 90

      # Vulnerability scanning with Trivy
      - name: Run Trivy vulnerability scanner (runner)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }}
          format: 'sarif'
          output: 'trivy-runner-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build, just report

      - name: Run Trivy vulnerability scanner (full)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.VERSION }}
          format: 'sarif'
          output: 'trivy-full-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      # Upload Trivy results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            trivy-runner-results.sarif
            trivy-full-results.sarif
          category: trivy-docker-public

      # Make packages public via GitHub API
      - name: Make runner package public
        run: |
          curl -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/user/packages/container/greenlang-runner \
            -d '{"visibility":"public"}' || echo "Package may already be public or this might be the first push"

      - name: Make full package public
        run: |
          curl -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/user/packages/container/greenlang-full \
            -d '{"visibility":"public"}' || echo "Package may already be public or this might be the first push"

      # Test images
      - name: Test runner image
        run: |
          echo "Testing GHCR runner image..."
          docker run --rm --platform linux/amd64 \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }} \
            --version

          echo "Testing Docker Hub runner image..."
          docker run --rm --platform linux/amd64 \
            ${{ env.DOCKERHUB_ORG }}/core-runner:${{ steps.meta.outputs.VERSION }} \
            --version

      - name: Test full image
        run: |
          echo "Testing GHCR full image..."
          docker run --rm --platform linux/amd64 \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.VERSION }} \
            gl --version

          echo "Testing Docker Hub full image..."
          docker run --rm --platform linux/amd64 \
            ${{ env.DOCKERHUB_ORG }}/core-full:${{ steps.meta.outputs.VERSION }} \
            gl --version

      # Generate summary
      - name: Generate summary
        run: |
          echo "## ✅ Docker Images Published Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Published Images" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Tags | Digest | Public |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Runner** | \`${{ steps.meta.outputs.VERSION }}\`, \`${{ steps.meta.outputs.MAJOR_MINOR }}\`, \`latest\` | \`${{ steps.build-runner.outputs.digest }}\` | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| **Full** | \`${{ steps.meta.outputs.VERSION }}\`, \`${{ steps.meta.outputs.MAJOR_MINOR }}\`, \`latest\` | \`${{ steps.build-full.outputs.digest }}\` | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Access Images" >> $GITHUB_STEP_SUMMARY
          echo "#### From GitHub Container Registry (GHCR)" >> $GITHUB_STEP_SUMMARY
          echo "```bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run runner image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ghcr.io/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm ghcr.io/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }} --version" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run full image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ghcr.io/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm ghcr.io/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.VERSION }} gl --version" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### From Docker Hub" >> $GITHUB_STEP_SUMMARY
          echo "```bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run runner image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.DOCKERHUB_ORG }}/core-runner:${{ steps.meta.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm ${{ env.DOCKERHUB_ORG }}/core-runner:${{ steps.meta.outputs.VERSION }} --version" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run full image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.DOCKERHUB_ORG }}/core-full:${{ steps.meta.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm ${{ env.DOCKERHUB_ORG }}/core-full:${{ steps.meta.outputs.VERSION }} gl --version" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Platforms" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ linux/arm64" >> $GITHUB_STEP_SUMMARY