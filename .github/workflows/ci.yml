name: CI with Strict Type Checking

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  type-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mypy types-PyYAML types-click types-requests
    
    - name: Run mypy strict type checking
      run: |
        mypy --strict greenlang/
        mypy --strict tests/
    
    - name: Check type coverage
      run: |
        mypy --html-report ./mypy_report greenlang/
        echo "Type coverage report generated in ./mypy_report"
  
  test:
    runs-on: ubuntu-latest
    needs: type-check
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov hypothesis
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=greenlang --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
  
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Lint with flake8
      run: |
        flake8 greenlang/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 greenlang/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
    
    - name: Check formatting with black
      run: |
        black --check greenlang/ tests/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only greenlang/ tests/
  
  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Bandit security checks
      run: |
        pip install bandit
        bandit -r greenlang/ -f json -o bandit-report.json
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-security-report
        path: bandit-report.json