name: CI

on:
  push:
    branches: [main, master]
    tags:
      - 'v*'
  pull_request:
    branches: [main, master]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: Unit (${{ matrix.os }} | py${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.10", "3.11", "3.12"]

    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTEST_ADDOPTS: -m "not integration and not e2e"   # skip heavy tests by default

    steps:
      - uses: actions/checkout@v4

      - name: Enable long paths on Windows
        if: runner.os == 'Windows'
        run: git config --system core.longpaths true

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'
          cache-dependency-path: |
            requirements*.txt
            pyproject.toml
            setup.py
            setup.cfg

      - name: Upgrade pip / build tools
        run: python -m pip install -U pip wheel build

      - name: Install dev deps
        shell: bash
        run: |
          if [ -f requirements-dev.txt ]; then
            python -m pip install -r requirements-dev.txt
          fi
          python -m pip install -e ".[dev]" || python -m pip install -e .

      - name: Show versions
        run: |
          python --version
          pip --version
          pip list

      - name: Run unit tests with coverage
        shell: bash
        run: |
          mkdir -p test-results
          pytest -q -ra --maxfail=1 --durations=20 --color=yes \
                 --cov=greenlang --cov-report=xml --junitxml=test-results/junit.xml

      - name: Enforce coverage floor
        run: |
          python - <<'PY'
          import sys, subprocess
          res = subprocess.run([sys.executable, "-m", "coverage", "report", "--fail-under=85"])
          sys.exit(res.returncode)
          PY
        shell: bash

      - name: Upload coverage.xml
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-py${{ matrix.python }}
          path: coverage.xml
          if-no-files-found: error
          retention-days: 7

      - name: Upload JUnit XML
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.os }}-py${{ matrix.python }}
          path: test-results/junit.xml
          if-no-files-found: warn
          retention-days: 7

      - name: Build sdist and wheel
        run: python -m build

      - name: Validate wheel and sdist
        run: |
          pip install twine
          twine check dist/*

      - name: Test package installation in clean env
        shell: bash
        run: |
          python -m venv test_venv
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            source test_venv/Scripts/activate
          else
            source test_venv/bin/activate
          fi
          pip install dist/*.whl
          gl --version || echo "GL command not found, checking alternate installations"
          python -c "import greenlang; print(greenlang.__version__)"

  security:
    name: Security Scan
    needs: tests
    uses: ./.github/workflows/security.yml

  gate-check:
    name: CI Gate Check
    runs-on: ubuntu-latest
    needs: [tests, security]
    if: always()
    steps:
      - name: Check all required jobs passed
        run: |
          if [[ "${{ needs.tests.result }}" != "success" ]]; then
            echo "Tests failed"
            exit 1
          fi
          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "Security checks failed"
            exit 1
          fi
          echo "âœ… All CI gates passed"