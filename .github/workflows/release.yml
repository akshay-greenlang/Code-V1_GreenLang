name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.2.0)'
        required: true
        type: string
      create_tag:
        description: 'Create git tag for this version'
        required: false
        default: false
        type: boolean
      publish_to_pypi:
        description: 'Publish to PyPI'
        required: false
        default: false
        type: boolean
      publish_docker:
        description: 'Publish Docker images'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      release-name: ${{ steps.version.outputs.release-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            VERSION=${VERSION#v}  # Remove 'v' prefix if present
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Check if this is a prerelease (contains alpha, beta, rc, dev)
          if [[ "$VERSION" =~ (alpha|beta|rc|dev) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
            echo "release-name=GreenLang $VERSION (Pre-release)" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
            echo "release-name=GreenLang $VERSION" >> $GITHUB_OUTPUT
          fi

          echo "Detected version: $VERSION"

      - name: Create tag if requested
        if: github.event.inputs.create_tag == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release version ${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Verify version consistency
        run: |
          # Check pyproject.toml version
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          if [[ "$PYPROJECT_VERSION" != "${{ steps.version.outputs.version }}" ]]; then
            echo "ERROR: Version mismatch between tag (${{ steps.version.outputs.version }}) and pyproject.toml ($PYPROJECT_VERSION)"
            exit 1
          fi

          # Check VERSION file if it exists
          if [[ -f VERSION ]]; then
            FILE_VERSION=$(cat VERSION | tr -d '\n\r ')
            if [[ "$FILE_VERSION" != "${{ steps.version.outputs.version }}" ]]; then
              echo "ERROR: Version mismatch between tag (${{ steps.version.outputs.version }}) and VERSION file ($FILE_VERSION)"
              exit 1
            fi
          fi

          echo "Version consistency check passed"

  build-python:
    needs: prepare-release
    uses: ./.github/workflows/build-and-package.yml
    with:
      python_version: '3.11'
      os_matrix: 'all'

  build-docker:
    needs: prepare-release
    if: github.event.inputs.publish_docker != 'false'
    uses: ./.github/workflows/docker-build.yml
    with:
      push_to_registry: true
      platforms: 'linux/amd64,linux/arm64'
      image_tag: ${{ needs.prepare-release.outputs.version }}

  create-release:
    needs: [prepare-release, build-python]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      discussions: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all Python build artifacts
        uses: actions/download-artifact@v3
        with:
          name: greenlang-v0.2.0-build-artifacts

      - name: Download container manifest (if available)
        uses: actions/download-artifact@v3
        with:
          name: container-manifest
        continue-on-error: true

      - name: Download security reports (if available)
        uses: actions/download-artifact@v3
        with:
          name: security-reports
        continue-on-error: true

      - name: Prepare release assets
        run: |
          mkdir -p release-assets

          # Copy Python packages
          find wheels -name "*.whl" -exec cp {} release-assets/ \; 2>/dev/null || true
          find sdist -name "*.tar.gz" -exec cp {} release-assets/ \; 2>/dev/null || true

          # Copy checksums
          find checksums -name "*.sha256" -exec cp {} release-assets/ \; 2>/dev/null || true
          find checksums -name "*.sha512" -exec cp {} release-assets/ \; 2>/dev/null || true

          # Copy SBOMs and manifests
          find . -name "*-sbom.*.json" -exec cp {} release-assets/ \; 2>/dev/null || true
          find . -name "*-manifest.json" -exec cp {} release-assets/ \; 2>/dev/null || true

          # Create release summary
          cat > release-assets/RELEASE_NOTES.md << 'EOF'
          # GreenLang ${{ needs.prepare-release.outputs.version }} Release

          ## ðŸ“¦ Assets Included

          ### Python Packages
          - Source distribution (`.tar.gz`)
          - Wheel packages for multiple platforms and Python versions
          - SHA256 and SHA512 checksums for all packages

          ### Docker Images
          - `ghcr.io/${{ github.repository }}:runner-${{ needs.prepare-release.outputs.version }}`
          - `ghcr.io/${{ github.repository }}:runner-optimized-${{ needs.prepare-release.outputs.version }}`
          - `ghcr.io/${{ github.repository }}:full-${{ needs.prepare-release.outputs.version }}`

          ### Security & Compliance
          - SBOM (Software Bill of Materials) files
          - Security scan reports
          - Container manifest with metadata

          ## ðŸš€ Installation

          ### From PyPI
          ```bash
          pip install greenlang==${{ needs.prepare-release.outputs.version }}
          ```

          ### From Docker Hub
          ```bash
          docker pull ghcr.io/${{ github.repository }}:runner-${{ needs.prepare-release.outputs.version }}
          ```

          ## ðŸ”’ Verification

          All release assets include checksums for integrity verification:
          ```bash
          # Verify wheel integrity
          sha256sum -c greenlang-*.whl.sha256
          ```

          ## ðŸ“‹ Build Information
          - **Git SHA**: ${{ github.sha }}
          - **Build Date**: $(date -u +%Y-%m-%d)
          - **Workflow Run**: ${{ github.run_id }}

          EOF

          # List all assets
          echo "=== Release Assets ==="
          find release-assets -type f | sort

      - name: Generate changelog
        id: changelog
        run: |
          # Extract changelog for this version if CHANGELOG.md exists
          if [[ -f CHANGELOG.md ]]; then
            # Try to extract changelog section for this version
            awk "/^## \[?${{ needs.prepare-release.outputs.version }}\]?|^## \[?v${{ needs.prepare-release.outputs.version }}\]?/{flag=1; next} /^## \[?[0-9]/{flag=0} flag {print}' CHANGELOG.md > version_changelog.txt
            if [[ -s version_changelog.txt ]]; then
              echo "Found changelog for version ${{ needs.prepare-release.outputs.version }}"
              cat version_changelog.txt
            else
              echo "No specific changelog found for version ${{ needs.prepare-release.outputs.version }}"
              echo "## Changes in this release" > version_changelog.txt
              echo "Please see the commit history for detailed changes." >> version_changelog.txt
            fi
          else
            echo "No CHANGELOG.md found, generating basic changelog"
            echo "## Changes in this release" > version_changelog.txt
            echo "GreenLang ${{ needs.prepare-release.outputs.version }} release." >> version_changelog.txt
            echo "" >> version_changelog.txt
            echo "### Commits since last release:" >> version_changelog.txt
            git log --oneline --no-merges $(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD >> version_changelog.txt 2>/dev/null || echo "Unable to generate commit log" >> version_changelog.txt
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          name: ${{ needs.prepare-release.outputs.release-name }}
          body_path: version_changelog.txt
          prerelease: ${{ needs.prepare-release.outputs.is-prerelease }}
          files: |
            release-assets/*
          discussion_category_name: Releases
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    needs: [prepare-release, create-release]
    runs-on: ubuntu-latest
    if: github.event.inputs.publish_to_pypi == 'true'
    environment: pypi
    permissions:
      id-token: write  # For trusted publishing
    steps:
      - name: Download Python build artifacts
        uses: actions/download-artifact@v3
        with:
          name: greenlang-v0.2.0-build-artifacts

      - name: Prepare PyPI assets
        run: |
          mkdir -p dist
          find wheels -name "*.whl" -exec cp {} dist/ \; 2>/dev/null || true
          find sdist -name "*.tar.gz" -exec cp {} dist/ \; 2>/dev/null || true

          echo "=== PyPI Assets ==="
          ls -la dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true

  update-docker-latest:
    needs: [prepare-release, build-docker, create-release]
    runs-on: ubuntu-latest
    if: needs.prepare-release.outputs.is-prerelease == 'false' && github.event.inputs.publish_docker != 'false'
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag and push latest images
        run: |
          VERSION=${{ needs.prepare-release.outputs.version }}

          # Tag runner images as latest
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:runner-$VERSION
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:runner-$VERSION ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          # Tag optimized runner as latest-optimized
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:runner-optimized-$VERSION
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:runner-optimized-$VERSION ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-optimized
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-optimized

          # Tag full image as latest-full
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:full-$VERSION
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:full-$VERSION ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-full
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-full

  notify-release:
    needs: [prepare-release, create-release, publish-pypi, update-docker-latest]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "=== Release Summary ==="
          echo "Version: ${{ needs.prepare-release.outputs.version }}"
          echo "Is Prerelease: ${{ needs.prepare-release.outputs.is-prerelease }}"
          echo "GitHub Release: âœ… Created"
          echo "PyPI Publish: ${{ (github.event.inputs.publish_to_pypi == 'true' && 'Requested') || 'Skipped' }}"
          echo "Docker Images: ${{ (github.event.inputs.publish_docker != 'false' && 'Published') || 'Skipped' }}"
          echo ""
          echo "=== Release URL ==="
          echo "https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare-release.outputs.version }}"
          echo ""
          echo "=== Docker Images ==="
          if [[ "${{ github.event.inputs.publish_docker }}" != "false" ]]; then
            echo "Runner: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:runner-${{ needs.prepare-release.outputs.version }}"
            echo "Runner (Optimized): ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:runner-optimized-${{ needs.prepare-release.outputs.version }}"
            echo "Full: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:full-${{ needs.prepare-release.outputs.version }}"
          else
            echo "Docker publishing was disabled"
          fi

      # Optional: Send notification to Slack, Discord, etc.
      # - name: Send notification
      #   if: success()
      #   run: |
      #     # Add notification logic here