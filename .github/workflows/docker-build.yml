name: Docker Build and Publish

on:
  push:
    branches: [ master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to container registry'
        required: false
        default: true
        type: boolean
      platforms:
        description: 'Platforms to build for'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: choice
        options:
          - 'linux/amd64'
          - 'linux/arm64'
          - 'linux/amd64,linux/arm64'
      image_tag:
        description: 'Custom image tag'
        required: false
        default: ''
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1
  BUILDX_NO_DEFAULT_ATTESTATIONS: 1

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-labels: ${{ steps.meta.outputs.labels }}
      should-push: ${{ steps.decide.outputs.should-push }}
      platforms: ${{ steps.platforms.outputs.platforms }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set platforms
        id: platforms
        run: |
          if [[ "${{ github.event.inputs.platforms }}" != "" ]]; then
            echo "platforms=${{ github.event.inputs.platforms }}" >> $GITHUB_OUTPUT
          else
            echo "platforms=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
          fi

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "version=0.2.0" >> $GITHUB_OUTPUT
          fi

      - name: Decide if should push
        id: decide
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-push=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.push_to_registry }}" == "false" ]]; then
            echo "should-push=false" >> $GITHUB_OUTPUT
          else
            echo "should-push=true" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.image_tag }},enable=${{ github.event.inputs.image_tag != '' }}

  build-runner:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: [Dockerfile.runner, Dockerfile.runner.optimized]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0

      - name: Log in to Container Registry
        if: needs.prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract image variant
        id: variant
        run: |
          if [[ "${{ matrix.dockerfile }}" == "Dockerfile.runner.optimized" ]]; then
            echo "variant=-optimized" >> $GITHUB_OUTPUT
            echo "suffix=-optimized" >> $GITHUB_OUTPUT
          else
            echo "variant=" >> $GITHUB_OUTPUT
            echo "suffix=" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ needs.prepare.outputs.platforms }}
          push: ${{ needs.prepare.outputs.should-push }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:runner${{ steps.variant.outputs.suffix }}-${{ needs.prepare.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:runner${{ steps.variant.outputs.suffix }}-latest
          labels: ${{ needs.prepare.outputs.image-labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.prepare.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

      - name: Run smoke test on image
        run: |
          echo "=== Testing runner image ${{ steps.variant.outputs.suffix }} ==="

          # Test basic functionality
          docker run --rm \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:runner${{ steps.variant.outputs.suffix }}-${{ needs.prepare.outputs.version }} \
            gl --version

          # Test with sample input
          echo '{"building_type": "office", "area": 1000, "energy_efficiency": "standard"}' | \
          docker run --rm -i \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:runner${{ steps.variant.outputs.suffix }}-${{ needs.prepare.outputs.version }} \
            gl calculate building-emissions --input-format json

      - name: Generate SBOM for Docker image
        if: needs.prepare.outputs.should-push == 'true'
        run: |
          # Install Syft for SBOM generation
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

          # Generate SBOM
          syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:runner${{ steps.variant.outputs.suffix }}-${{ needs.prepare.outputs.version }} \
            -o spdx-json=docker-runner${{ steps.variant.outputs.suffix }}-sbom.spdx.json

          # Generate CycloneDX format
          syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:runner${{ steps.variant.outputs.suffix }}-${{ needs.prepare.outputs.version }} \
            -o cyclonedx-json=docker-runner${{ steps.variant.outputs.suffix }}-sbom.cyclonedx.json

      - name: Upload SBOM artifacts
        if: needs.prepare.outputs.should-push == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: docker-sbom-runner${{ steps.variant.outputs.suffix }}
          path: |
            docker-runner${{ steps.variant.outputs.suffix }}-sbom.spdx.json
            docker-runner${{ steps.variant.outputs.suffix }}-sbom.cyclonedx.json

  build-full:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: needs.prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push full Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.full
          platforms: ${{ needs.prepare.outputs.platforms }}
          push: ${{ needs.prepare.outputs.should-push }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:full-${{ needs.prepare.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:full-latest
          labels: ${{ needs.prepare.outputs.image-labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.prepare.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

      - name: Run comprehensive smoke test on full image
        run: |
          echo "=== Testing full image ==="

          # Test basic functionality
          docker run --rm \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:full-${{ needs.prepare.outputs.version }} \
            gl --version

          # Test advanced features
          echo '{"building_type": "office", "area": 1000, "energy_efficiency": "high"}' | \
          docker run --rm -i \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:full-${{ needs.prepare.outputs.version }} \
            gl calculate building-emissions --input-format json --output-format json

          # Test pipeline functionality
          docker run --rm \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:full-${{ needs.prepare.outputs.version }} \
            gl pipeline validate --help

      - name: Generate SBOM for full Docker image
        if: needs.prepare.outputs.should-push == 'true'
        run: |
          # Install Syft for SBOM generation
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

          # Generate SBOM
          syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:full-${{ needs.prepare.outputs.version }} \
            -o spdx-json=docker-full-sbom.spdx.json

          # Generate CycloneDX format
          syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:full-${{ needs.prepare.outputs.version }} \
            -o cyclonedx-json=docker-full-sbom.cyclonedx.json

      - name: Upload SBOM artifacts
        if: needs.prepare.outputs.should-push == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: docker-sbom-full
          path: |
            docker-full-sbom.spdx.json
            docker-full-sbom.cyclonedx.json

  security-scan:
    needs: [prepare, build-runner, build-full]
    runs-on: ubuntu-latest
    if: needs.prepare.outputs.should-push == 'true'
    strategy:
      matrix:
        image-variant: [runner, runner-optimized, full]
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.image-variant }}-${{ needs.prepare.outputs.version }}'
          format: 'sarif'
          output: 'trivy-${{ matrix.image-variant }}-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.image-variant }}-results.sarif'

      - name: Run Trivy vulnerability scanner (JSON)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.image-variant }}-${{ needs.prepare.outputs.version }}'
          format: 'json'
          output: 'trivy-${{ matrix.image-variant }}-results.json'

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-${{ matrix.image-variant }}
          path: |
            trivy-${{ matrix.image-variant }}-results.sarif
            trivy-${{ matrix.image-variant }}-results.json

  publish-manifest:
    needs: [prepare, build-runner, build-full, security-scan]
    runs-on: ubuntu-latest
    if: needs.prepare.outputs.should-push == 'true' && always()
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all SBOM artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: docker-sbom-*
          merge-multiple: true

      - name: Create container manifest
        run: |
          cat > container-manifest.json << EOF
          {
            "build_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "git_sha": "${{ github.sha }}",
            "git_ref": "${{ github.ref }}",
            "workflow_run_id": "${{ github.run_id }}",
            "version": "${{ needs.prepare.outputs.version }}",
            "registry": "${{ env.REGISTRY }}",
            "images": {
              "runner": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:runner-${{ needs.prepare.outputs.version }}",
              "runner_optimized": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:runner-optimized-${{ needs.prepare.outputs.version }}",
              "full": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:full-${{ needs.prepare.outputs.version }}"
            },
            "platforms": "${{ needs.prepare.outputs.platforms }}",
            "sbom_files": [
              $(find . -name "*-sbom.*.json" | sed 's/^/"/;s/$/"/' | paste -sd,)
            ]
          }
          EOF

      - name: Upload container manifest
        uses: actions/upload-artifact@v4
        with:
          name: container-manifest
          path: |
            container-manifest.json
            *-sbom.*.json

      - name: Display build summary
        run: |
          echo "=== Docker Build Summary ==="
          echo "Version: ${{ needs.prepare.outputs.version }}"
          echo "Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Platforms: ${{ needs.prepare.outputs.platforms }}"
          echo "Git SHA: ${{ github.sha }}"
          echo ""
          echo "=== Images Built ==="
          echo "Runner: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:runner-${{ needs.prepare.outputs.version }}"
          echo "Runner (Optimized): ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:runner-optimized-${{ needs.prepare.outputs.version }}"
          echo "Full: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:full-${{ needs.prepare.outputs.version }}"
          echo ""
          echo "=== SBOM Files Generated ==="
          find . -name "*-sbom.*.json" | sort