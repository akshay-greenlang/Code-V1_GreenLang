name: Release v0.3.0 Pipeline

on:
  push:
    tags:
      - 'v0.3.0'
      - 'v0.3.0-rc.*'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (no publishing)'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write  # For OIDC signing
  attestations: write

env:
  VERSION: "0.3.0"

jobs:
  validate-release:
    name: Validate Release Readiness
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.check.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Extract version
        id: version
        run: |
          VERSION=$(cat VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check tag vs VERSION
        run: |
          TAG_VERSION="${GITHUB_REF#refs/tags/v}"
          FILE_VERSION=$(cat VERSION)
          if [[ "$TAG_VERSION" != "$FILE_VERSION"* ]]; then
            echo "❌ Tag version ($TAG_VERSION) doesn't match VERSION file ($FILE_VERSION)"
            exit 1
          fi
          echo "✅ Version check passed"

      - name: Check if prerelease
        id: check
        run: |
          if [[ "${{ github.ref }}" == *"-rc"* ]] || [[ "${{ github.ref }}" == *"-beta"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

  build-and-sign:
    name: Build & Sign Artifacts
    needs: validate-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine sigstore

      - name: Build package
        run: |
          python -m build
          ls -la dist/

      - name: Check package
        run: |
          twine check dist/*

      - name: Sign with sigstore (OIDC)
        run: |
          python -m sigstore sign \
            --oidc-client-id sigstore \
            --oidc-issuer https://oauth2.sigstore.dev/auth \
            dist/*.whl dist/*.tar.gz

      - name: Verify signatures
        run: |
          for file in dist/*.whl dist/*.tar.gz; do
            python -m sigstore verify identity \
              --cert-oidc-issuer https://token.actions.githubusercontent.com \
              --cert-identity-regexp "https://github.com/${{ github.repository }}/.github/workflows/" \
              "$file"
          done

      - name: Generate SBOM
        run: |
          pip install cyclonedx-bom
          cyclonedx-py requirements -i requirements.txt -o sbom/greenlang-${{ needs.validate-release.outputs.version }}.sbom.json --format json

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts
          path: |
            dist/
            sbom/

  publish-pypi:
    name: Publish to PyPI
    needs: [validate-release, build-and-sign]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.dry_run == 'false'
    environment:
      name: pypi
      url: https://pypi.org/project/greenlang-cli/
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts
          path: dist/

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install twine
        run: pip install twine

      - name: Publish to TestPyPI (if prerelease)
        if: needs.validate-release.outputs.is_prerelease == 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          twine upload --repository testpypi dist/*.whl dist/*.tar.gz

      - name: Publish to PyPI (if release)
        if: needs.validate-release.outputs.is_prerelease == 'false'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*.whl dist/*.tar.gz

  build-docker:
    name: Build & Push Docker Images
    needs: [validate-release, build-and-sign]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.dry_run == 'false'
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts
          path: dist/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          file: docker/Runner.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            greenlang/greenlang:${{ needs.validate-release.outputs.version }}
            greenlang/greenlang:latest
          labels: |
            org.opencontainers.image.version=${{ needs.validate-release.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Sign container image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes \
            --oidc-issuer https://token.actions.githubusercontent.com \
            greenlang/greenlang:${{ needs.validate-release.outputs.version }}@${{ steps.build.outputs.digest }}

      - name: Verify container signature
        run: |
          cosign verify \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity https://github.com/${{ github.repository }}/.github/workflows/release-v030.yml@${{ github.ref }} \
            greenlang/greenlang:${{ needs.validate-release.outputs.version }}@${{ steps.build.outputs.digest }}

  create-release:
    name: Create GitHub Release
    needs: [validate-release, build-and-sign, publish-pypi, build-docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts
          path: dist/

      - name: Generate checksums
        run: |
          cd dist
          sha256sum *.whl *.tar.gz > SHA256SUMS
          cd ..

      - name: Extract changelog
        id: changelog
        run: |
          # Extract the v0.3.0 section from CHANGELOG.md
          sed -n '/## \[0.3.0\]/,/## \[/p' CHANGELOG.md | head -n -1 > release_notes.md || echo "See CHANGELOG.md for details" > release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: GreenLang v${{ needs.validate-release.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease == 'true' }}
          files: |
            dist/*.whl
            dist/*.tar.gz
            dist/*.sig
            dist/*.crt
            dist/SHA256SUMS
            sbom/*.json

  verify-release:
    name: E2E Release Verification
    needs: [validate-release, publish-pypi, build-docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Wait for PyPI availability
        run: sleep 60  # Give PyPI time to update

      - name: Test PyPI installation
        run: |
          python -m venv test_env
          source test_env/bin/activate
          if [[ "${{ needs.validate-release.outputs.is_prerelease }}" == "true" ]]; then
            pip install -i https://test.pypi.org/simple/ greenlang-cli==${{ needs.validate-release.outputs.version }}
          else
            pip install greenlang-cli==${{ needs.validate-release.outputs.version }}
          fi
          gl --version | grep "${{ needs.validate-release.outputs.version }}"

      - name: Test Docker image
        run: |
          docker run --rm greenlang/greenlang:${{ needs.validate-release.outputs.version }} --version
          docker run --rm greenlang/greenlang:${{ needs.validate-release.outputs.version }} --help

      - name: Verify signatures
        run: |
          pip install sigstore
          # Download and verify wheel from PyPI
          pip download --no-deps greenlang-cli==${{ needs.validate-release.outputs.version }}
          python -m sigstore verify identity \
            --cert-oidc-issuer https://token.actions.githubusercontent.com \
            --cert-identity-regexp "https://github.com/${{ github.repository }}/" \
            greenlang_cli-*.whl || echo "Signature verification skipped"

  post-release:
    name: Post-Release Tasks
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && needs.validate-release.outputs.is_prerelease == 'false'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Bump to next dev version
        run: |
          echo "0.3.1-dev" > VERSION
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add VERSION
          git commit -m "chore: bump version to 0.3.1-dev [skip ci]"
          git push origin main

      - name: Create release/0.3.x branch
        run: |
          git checkout -b release/0.3.x
          git push origin release/0.3.x