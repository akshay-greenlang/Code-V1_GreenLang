name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test,dev]
    
    - name: Run linting (ruff)
      run: |
        ruff check greenlang/ tests/
      continue-on-error: false  # Fail if linting fails
    
    - name: Run type checking (mypy)
      run: |
        mypy greenlang/ --strict --ignore-missing-imports
      continue-on-error: false  # Fail if type checking fails
    
    - name: Run code formatting check (black)
      run: |
        black --check greenlang/ tests/
      continue-on-error: false  # Fail if formatting is wrong
    
    - name: Run unit tests with coverage
      run: |
        pytest -q -m "not integration and not e2e" \
          --cov=greenlang --cov-report=term-missing --cov-report=xml
    
    - name: Check coverage thresholds
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        coverage = float(root.attrib['line-rate']) * 100
        
        print(f'Overall coverage: {coverage:.1f}%')
        
        # Check overall coverage >= 85%
        if coverage < 85:
            print(f'ERROR: Coverage {coverage:.1f}% is below 85% threshold')
            exit(1)
        
        # Check agent coverage >= 90%
        for package in root.findall('.//package'):
            if 'agents' in package.attrib.get('name', ''):
                agent_coverage = float(package.attrib.get('line-rate', 0)) * 100
                print(f'Agent coverage: {agent_coverage:.1f}%')
                if agent_coverage < 90:
                    print(f'ERROR: Agent coverage {agent_coverage:.1f}% is below 90% threshold')
                    exit(1)
        
        print('Coverage thresholds met!')
        "
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
    
    - name: Run snapshot tests
      run: |
        pytest tests/ -m snapshot --snapshot-update
      if: github.event_name == 'pull_request'
    
    - name: Check for snapshot changes
      run: |
        git diff --exit-code tests/snapshots/
      if: github.event_name == 'pull_request'
      continue-on-error: true  # Don't fail, but flag for review
    
    - name: Performance benchmark
      run: |
        pytest tests/ --benchmark-only --benchmark-json=benchmark.json
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
    
    - name: Check test performance
      run: |
        python -c "
        import json
        import time
        
        # Run a simple timing test
        start = time.time()
        import subprocess
        result = subprocess.run(['pytest', 'tests/', '-q'], capture_output=True)
        elapsed = time.time() - start
        
        print(f'Test suite completed in {elapsed:.1f} seconds')
        
        # Ensure tests complete within 90 seconds
        if elapsed > 90:
            print(f'ERROR: Tests took {elapsed:.1f}s, exceeding 90s limit')
            exit(1)
        "
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'

  quality-gates:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: All quality gates passed
      run: |
        echo "✅ All quality gates passed:"
        echo "  - Linting (ruff) ✓"
        echo "  - Type checking (mypy --strict) ✓"
        echo "  - Code formatting (black) ✓"
        echo "  - Coverage ≥85% overall ✓"
        echo "  - Coverage ≥90% for agents ✓"
        echo "  - Tests complete in <90s ✓"
        echo "  - Tests pass on Python 3.9-3.12 ✓"
        echo "  - Tests pass on Linux/macOS/Windows ✓"