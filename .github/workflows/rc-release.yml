name: RC Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'
  workflow_dispatch:
    inputs:
      version:
        description: 'RC Version (e.g., 0.3.0-rc.1)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate:
    name: Validate RC Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      rc_number: ${{ steps.extract.outputs.rc_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version info
        id: extract
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          RC_NUMBER=$(echo $VERSION | sed 's/.*rc\.*//')
          echo "rc_number=$RC_NUMBER" >> $GITHUB_OUTPUT
          echo "Processing RC version: $VERSION (RC #$RC_NUMBER)"

      - name: Verify security gate
        run: |
          # Check for required security files
          [ -f "greenlang/policy/bundles/install.rego" ] || exit 1
          [ -f "greenlang/policy/bundles/run.rego" ] || exit 1
          echo "✅ Security gate files present"

  build-and-sign:
    name: Build and Sign Artifacts
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip build twine
          pip install sigstore cosign

      - name: Build distribution
        run: |
          python -m build
          echo "✅ Built wheel and source distribution"

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: ./dist
          format: spdx-json
          artifact-name: sbom-rc-${{ needs.validate.outputs.version }}.spdx.json

      - name: Sign with Sigstore (keyless)
        run: |
          # Sign wheel
          for file in dist/*.whl; do
            python -m sigstore sign "$file"
            echo "✅ Signed $file with Sigstore"
          done

          # Sign source tarball
          for file in dist/*.tar.gz; do
            python -m sigstore sign "$file"
            echo "✅ Signed $file with Sigstore"
          done

      - name: Verify signatures
        run: |
          for file in dist/*.whl dist/*.tar.gz; do
            python -m sigstore verify identity \
              --cert-identity-regex ".*" \
              --cert-oidc-issuer https://token.actions.githubusercontent.com \
              "$file"
            echo "✅ Verified signature for $file"
          done

      - name: Create RC artifacts archive
        run: |
          mkdir rc-artifacts
          cp dist/* rc-artifacts/
          cp sbom*.json rc-artifacts/
          tar czf rc-${{ needs.validate.outputs.version }}-artifacts.tar.gz rc-artifacts/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rc-${{ needs.validate.outputs.version }}-signed
          path: |
            dist/
            *.sigstore
            sbom*.json

  build-docker:
    name: Build and Sign Docker Image
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/greenlang:${{ needs.validate.outputs.version }}
            ghcr.io/${{ github.repository }}/greenlang:rc-latest
          labels: |
            org.opencontainers.image.version=${{ needs.validate.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.greenlang.rc=true
            org.greenlang.rc.number=${{ needs.validate.outputs.rc_number }}

      - name: Sign container image
        run: |
          cosign sign --yes \
            ghcr.io/${{ github.repository }}/greenlang@${{ steps.docker.outputs.digest }}
          echo "✅ Signed container image with cosign"

      - name: Generate container SBOM
        run: |
          cosign attach sbom --sbom sbom-container.spdx.json \
            ghcr.io/${{ github.repository }}/greenlang@${{ steps.docker.outputs.digest }}
          echo "✅ Attached SBOM to container"

  test-rc:
    name: Test RC Artifacts
    needs: [validate, build-and-sign]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ['3.10', '3.11', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Download RC artifacts
        uses: actions/download-artifact@v4
        with:
          name: rc-${{ needs.validate.outputs.version }}-signed
          path: ./dist

      - name: Install and test RC
        run: |
          python -m pip install --upgrade pip
          pip install dist/greenlang_cli-*.whl
          gl --version
          gl doctor
          echo "✅ RC installation test passed"

      - name: Run smoke tests
        run: |
          # Create test pack
          gl init pack-basic test-pack
          cd test-pack
          gl pack validate .
          echo "✅ Pack validation passed"

      - name: Test signature verification
        if: runner.os == 'Linux'
        run: |
          pip install sigstore
          cd dist
          for file in *.whl; do
            python -m sigstore verify identity \
              --cert-identity-regex ".*" \
              --cert-oidc-issuer https://token.actions.githubusercontent.com \
              "$file"
          done
          echo "✅ Signature verification test passed"

  generate-changelog:
    name: Generate Changelog
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get previous RC or release tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          echo "# Release Candidate v${{ needs.validate.outputs.version }}" > CHANGELOG_RC.md
          echo "" >> CHANGELOG_RC.md
          echo "## Summary" >> CHANGELOG_RC.md
          echo "Release Candidate #${{ needs.validate.outputs.rc_number }} for version ${VERSION%%-rc*}" >> CHANGELOG_RC.md
          echo "" >> CHANGELOG_RC.md

          # Generate commit summary
          echo "## Changes since $PREV_TAG" >> CHANGELOG_RC.md
          git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD >> CHANGELOG_RC.md
          echo "" >> CHANGELOG_RC.md

          # Add categories
          echo "## Breaking Changes" >> CHANGELOG_RC.md
          git log --grep="BREAKING" --pretty=format:"- %s" ${PREV_TAG}..HEAD >> CHANGELOG_RC.md || echo "None"
          echo "" >> CHANGELOG_RC.md

          echo "## Security" >> CHANGELOG_RC.md
          git log --grep="security\|Security\|SECURITY" --pretty=format:"- %s" ${PREV_TAG}..HEAD >> CHANGELOG_RC.md || echo "None"
          echo "" >> CHANGELOG_RC.md

          echo "## Features" >> CHANGELOG_RC.md
          git log --grep="feat\|feature\|Feature" --pretty=format:"- %s" ${PREV_TAG}..HEAD >> CHANGELOG_RC.md || echo "None"
          echo "" >> CHANGELOG_RC.md

          echo "## Fixes" >> CHANGELOG_RC.md
          git log --grep="fix\|Fix\|bug\|Bug" --pretty=format:"- %s" ${PREV_TAG}..HEAD >> CHANGELOG_RC.md || echo "None"
          echo "" >> CHANGELOG_RC.md

          # Add testing instructions
          echo "## Testing Instructions" >> CHANGELOG_RC.md
          echo '```bash' >> CHANGELOG_RC.md
          echo "# Install RC" >> CHANGELOG_RC.md
          echo "pip install greenlang-cli==${{ needs.validate.outputs.version }}" >> CHANGELOG_RC.md
          echo "" >> CHANGELOG_RC.md
          echo "# Or use Docker" >> CHANGELOG_RC.md
          echo "docker pull ghcr.io/${{ github.repository }}/greenlang:${{ needs.validate.outputs.version }}" >> CHANGELOG_RC.md
          echo "" >> CHANGELOG_RC.md
          echo "# Verify installation" >> CHANGELOG_RC.md
          echo "gl --version" >> CHANGELOG_RC.md
          echo "gl doctor" >> CHANGELOG_RC.md
          echo '```' >> CHANGELOG_RC.md

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog-rc
          path: CHANGELOG_RC.md

  create-release:
    name: Create GitHub RC Release
    needs: [validate, build-and-sign, build-docker, test-rc, generate-changelog]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: v${{ needs.validate.outputs.version }}
          body_path: changelog-rc/CHANGELOG_RC.md
          draft: false
          prerelease: true
          generate_release_notes: true
          files: |
            rc-${{ needs.validate.outputs.version }}-signed/dist/*
            rc-${{ needs.validate.outputs.version }}-signed/*.sigstore
            rc-${{ needs.validate.outputs.version }}-signed/sbom*.json

      - name: Notify stakeholders
        if: success()
        run: |
          echo "🎉 RC v${{ needs.validate.outputs.version }} has been released!"
          echo "PyPI: pip install greenlang-cli==${{ needs.validate.outputs.version }}"
          echo "Docker: ghcr.io/${{ github.repository }}/greenlang:${{ needs.validate.outputs.version }}"
          echo "GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.validate.outputs.version }}"

  security-gate:
    name: Security Gate Check
    needs: [build-and-sign, build-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}/greenlang:rc-latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Check for critical vulnerabilities
        run: |
          if grep -q "CRITICAL" trivy-results.sarif; then
            echo "❌ Critical vulnerabilities found - RC blocked"
            exit 1
          fi
          echo "✅ No critical vulnerabilities found"

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'