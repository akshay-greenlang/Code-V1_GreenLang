name: Pack Validation

on:
  push:
    paths:
      - 'packs/**'
      - 'core/greenlang/packs/**'
      - '.github/workflows/pack-validation.yml'
  pull_request:
    paths:
      - 'packs/**'
      - 'core/greenlang/packs/**'

jobs:
  validate-packs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pyyaml packaging
    
    - name: Find all packs
      id: find-packs
      run: |
        echo "PACKS=$(find packs -name 'pack.yaml' -type f | xargs -I {} dirname {} | tr '\n' ' ')" >> $GITHUB_OUTPUT
    
    - name: Validate pack manifests
      run: |
        for pack in ${{ steps.find-packs.outputs.PACKS }}; do
          echo "Validating $pack..."
          python -c "
from pathlib import Path
from core.greenlang.packs.manifest import validate_pack

pack_dir = Path('$pack')
is_valid, errors = validate_pack(pack_dir)

if not is_valid:
    print(f'❌ Validation failed for {pack_dir.name}:')
    for error in errors:
        print(f'  - {error}')
    exit(1)
else:
    print(f'✅ {pack_dir.name} validation passed')
"
        done
    
    - name: Check pack structure
      run: |
        for pack in ${{ steps.find-packs.outputs.PACKS }}; do
          echo "Checking structure of $pack..."
          
          # Check required files exist
          [ -f "$pack/pack.yaml" ] || { echo "Missing pack.yaml"; exit 1; }
          [ -f "$pack/CARD.md" ] || { echo "Missing CARD.md"; exit 1; }
          
          # Check directories
          [ -d "$pack/tests" ] || echo "Warning: No tests directory"
          
          # Check for at least one content type
          if [ -f "$pack/gl.yaml" ] || [ -d "$pack/agents" ] || [ -d "$pack/datasets" ]; then
            echo "✅ Pack has content"
          else
            echo "❌ Pack has no content (pipelines, agents, or datasets)"
            exit 1
          fi
        done
    
    - name: Run pack tests
      run: |
        for pack in ${{ steps.find-packs.outputs.PACKS }}; do
          if [ -d "$pack/tests" ]; then
            echo "Running tests for $pack..."
            cd "$pack"
            python -m pytest tests/ -v || exit 1
            cd -
          else
            echo "Skipping tests for $pack (no tests directory)"
          fi
        done
    
    - name: Check policy compliance
      run: |
        for pack in ${{ steps.find-packs.outputs.PACKS }}; do
          echo "Checking policy compliance for $pack..."
          python -c "
import yaml
from pathlib import Path

pack_dir = Path('$pack')
with open(pack_dir / 'pack.yaml') as f:
    manifest = yaml.safe_load(f)

# Check policy requirements
policy = manifest.get('policy', {})

# Network allowlist check for packs
if manifest.get('kind') == 'pack' and not policy.get('network'):
    print('❌ Pack must have network allowlist')
    exit(1)

# License check
license = manifest.get('license')
allowed = ['MIT', 'Apache-2.0', 'GPL-3.0', 'Commercial']
if license not in allowed:
    print(f'❌ License {license} not in allowed list: {allowed}')
    exit(1)

# EF vintage check
ef_vintage = policy.get('ef_vintage_min')
if ef_vintage and ef_vintage < 2024:
    print(f'❌ EF vintage {ef_vintage} too old (min: 2024)')
    exit(1)

print('✅ Policy compliance passed')
"
        done
    
    - name: Generate SBOM
      run: |
        for pack in ${{ steps.find-packs.outputs.PACKS }}; do
          echo "Generating SBOM for $pack..."
          python -c "
from pathlib import Path
from core.greenlang.provenance.sbom import generate_sbom

pack_dir = Path('$pack')
sbom_path = pack_dir / 'sbom.spdx.json'
sbom = generate_sbom(pack_dir, sbom_path)
print(f'✅ Generated SBOM with {len(sbom.get(\"components\", []))} components')
"
        done
    
    - name: Check determinism (golden tests)
      run: |
        for pack in ${{ steps.find-packs.outputs.PACKS }}; do
          if [ -f "$pack/tests/golden/expected.run.json" ]; then
            echo "Checking determinism for $pack..."
            # In real CI, would run pipeline and compare output
            echo "✅ Golden test check (simulated)"
          fi
        done
    
    - name: Security scan
      run: |
        pip install safety bandit
        
        for pack in ${{ steps.find-packs.outputs.PACKS }}; do
          echo "Security scanning $pack..."
          
          # Check for secrets
          if grep -r "api_key\|secret\|password\|token" "$pack" --exclude-dir=.git; then
            echo "⚠️  Warning: Potential secrets found in $pack"
          fi
          
          # Run bandit on Python files
          if find "$pack" -name "*.py" -type f | head -1; then
            bandit -r "$pack" -f json || true
          fi
        done
    
    - name: Create validation report
      if: always()
      run: |
        echo "# Pack Validation Report" > validation_report.md
        echo "" >> validation_report.md
        echo "## Validated Packs" >> validation_report.md
        for pack in ${{ steps.find-packs.outputs.PACKS }}; do
          echo "- ✅ $(basename $pack)" >> validation_report.md
        done
        
        cat validation_report.md
    
    - name: Upload validation report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: validation-report
        path: validation_report.md

  lint-pack-code:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linters
      run: |
        pip install ruff black mypy
    
    - name: Run ruff
      run: |
        ruff check packs/ || true
    
    - name: Check formatting with black
      run: |
        black --check packs/ || true
    
    - name: Type check with mypy
      run: |
        mypy packs/ --ignore-missing-imports || true