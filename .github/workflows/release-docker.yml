name: Release Docker Images

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.0)'
        required: true
        type: string
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  DOCKERHUB_ORG: greenlang

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # Required for OIDC/keyless signing with cosign
      security-events: write  # Required for uploading security scan results

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better metadata

      - name: Set up QEMU for multi-arch
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version and metadata
        id: meta
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi

          # Extract major.minor for additional tags
          MAJOR_MINOR=$(echo $VERSION | cut -d. -f1,2)

          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "MAJOR_MINOR=$MAJOR_MINOR" >> $GITHUB_OUTPUT
          echo "DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          echo "SHA=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          echo "FULL_SHA=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      # Build and push RUNNER image (minimal production)
      - name: Build and push runner image
        id: build-runner
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.runner
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            GL_VERSION=${{ steps.meta.outputs.VERSION }}
            BUILD_DATE=${{ steps.meta.outputs.DATE }}
            VCS_REF=${{ steps.meta.outputs.FULL_SHA }}
            VERSION=${{ steps.meta.outputs.VERSION }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.MAJOR_MINOR }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:latest
            ${{ env.DOCKERHUB_ORG }}/core-runner:${{ steps.meta.outputs.VERSION }}
            ${{ env.DOCKERHUB_ORG }}/core-runner:${{ steps.meta.outputs.MAJOR_MINOR }}
            ${{ env.DOCKERHUB_ORG }}/core-runner:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:buildcache,mode=max
          provenance: true
          sbom: true

      # Build and push FULL image (dev/CI)
      - name: Build and push full image
        id: build-full
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.full
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            GL_VERSION=${{ steps.meta.outputs.VERSION }}
            BUILD_DATE=${{ steps.meta.outputs.DATE }}
            VCS_REF=${{ steps.meta.outputs.FULL_SHA }}
            VERSION=${{ steps.meta.outputs.VERSION }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.MAJOR_MINOR }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:latest
            ${{ env.DOCKERHUB_ORG }}/core-full:${{ steps.meta.outputs.VERSION }}
            ${{ env.DOCKERHUB_ORG }}/core-full:${{ steps.meta.outputs.MAJOR_MINOR }}
            ${{ env.DOCKERHUB_ORG }}/core-full:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:buildcache,mode=max
          provenance: true
          sbom: true

      # Generate SBOM with Syft
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.15.0

      - name: Generate SBOM for runner image
        run: |
          syft ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }} \
            -o spdx-json=sbom-runner-${{ steps.meta.outputs.VERSION }}.spdx.json \
            -o cyclonedx-json=sbom-runner-${{ steps.meta.outputs.VERSION }}.cyclonedx.json

      - name: Generate SBOM for full image
        run: |
          syft ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.VERSION }} \
            -o spdx-json=sbom-full-${{ steps.meta.outputs.VERSION }}.spdx.json \
            -o cyclonedx-json=sbom-full-${{ steps.meta.outputs.VERSION }}.cyclonedx.json

      # Upload SBOMs as artifacts
      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: sboms-${{ steps.meta.outputs.VERSION }}
          path: |
            sbom-*.json
          retention-days: 90

      # Vulnerability scanning with Trivy
      - name: Run Trivy vulnerability scanner (runner)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }}
          format: 'sarif'
          output: 'trivy-runner-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build, just report

      - name: Run Trivy vulnerability scanner (full)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.VERSION }}
          format: 'sarif'
          output: 'trivy-full-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      # Upload Trivy results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            trivy-runner-results.sarif
            trivy-full-results.sarif
          category: trivy-docker

      # Sign images with Cosign (keyless using OIDC)
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.6.0
        with:
          cosign-release: 'v2.2.4'

      - name: Sign runner images
        run: |
          # Sign GHCR images
          cosign sign --yes \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }}@${{ steps.build-runner.outputs.digest }}

          # Sign Docker Hub images
          cosign sign --yes \
            ${{ env.DOCKERHUB_ORG }}/core-runner:${{ steps.meta.outputs.VERSION }}@${{ steps.build-runner.outputs.digest }}

      - name: Sign full images
        run: |
          # Sign GHCR images
          cosign sign --yes \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.VERSION }}@${{ steps.build-full.outputs.digest }}

          # Sign Docker Hub images
          cosign sign --yes \
            ${{ env.DOCKERHUB_ORG }}/core-full:${{ steps.meta.outputs.VERSION }}@${{ steps.build-full.outputs.digest }}

      # Attach SBOMs to images
      - name: Attach SBOM to runner image
        run: |
          cosign attach sbom \
            --sbom sbom-runner-${{ steps.meta.outputs.VERSION }}.spdx.json \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }}@${{ steps.build-runner.outputs.digest }}

      - name: Attach SBOM to full image
        run: |
          cosign attach sbom \
            --sbom sbom-full-${{ steps.meta.outputs.VERSION }}.spdx.json \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.VERSION }}@${{ steps.build-full.outputs.digest }}

      # Generate attestation
      - name: Generate SLSA provenance attestation
        uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.10.0
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner
          digest: ${{ steps.build-runner.outputs.digest }}
          registry-username: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}

      # Test images
      - name: Test runner image (amd64)
        run: |
          docker run --rm --platform linux/amd64 \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }} \
            --version

      - name: Test runner image (arm64)
        run: |
          docker run --rm --platform linux/arm64 \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }} \
            --version

      - name: Test full image (amd64)
        run: |
          docker run --rm --platform linux/amd64 \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.VERSION }} \
            gl --version

      # Create release notes
      - name: Create release notes
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cat << EOF > DOCKER_RELEASE_NOTES.md
          ## Docker Images Released

          ### Runner Image (Minimal Production)
          - GHCR: \`ghcr.io/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }}\`
          - Docker Hub: \`${{ env.DOCKERHUB_ORG }}/core-runner:${{ steps.meta.outputs.VERSION }}\`
          - Digest: \`${{ steps.build-runner.outputs.digest }}\`
          - Platforms: linux/amd64, linux/arm64

          ### Full Image (Developer/CI)
          - GHCR: \`ghcr.io/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.VERSION }}\`
          - Docker Hub: \`${{ env.DOCKERHUB_ORG }}/core-full:${{ steps.meta.outputs.VERSION }}\`
          - Digest: \`${{ steps.build-full.outputs.digest }}\`
          - Platforms: linux/amd64, linux/arm64

          ### Security
          - Images are signed with Cosign (keyless)
          - SBOMs attached (SPDX and CycloneDX formats)
          - Vulnerability scan results available in Security tab

          ### Verification

          Verify image signatures:
          \`\`\`bash
          # Install cosign
          brew install cosign  # or your package manager

          # Verify runner image
          cosign verify ghcr.io/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }} \\
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/.github/workflows/release-docker.yml@refs/tags/v${{ steps.meta.outputs.VERSION }}" \\
            --certificate-oidc-issuer https://token.actions.githubusercontent.com

          # Verify full image
          cosign verify ghcr.io/${{ github.repository_owner }}/greenlang-full:${{ steps.meta.outputs.VERSION }} \\
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/.github/workflows/release-docker.yml@refs/tags/v${{ steps.meta.outputs.VERSION }}" \\
            --certificate-oidc-issuer https://token.actions.githubusercontent.com
          \`\`\`

          View SBOM:
          \`\`\`bash
          # View attached SBOM
          cosign download sbom ghcr.io/${{ github.repository_owner }}/greenlang-runner:${{ steps.meta.outputs.VERSION }}
          \`\`\`
          EOF

      - name: Upload release notes
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: docker-release-notes
          path: DOCKER_RELEASE_NOTES.md

      # Summary
      - name: Job Summary
        run: |
          echo "## 🐳 Docker Multi-Arch Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images Published" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Version | Digest |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Runner | ${{ steps.meta.outputs.VERSION }} | \`${{ steps.build-runner.outputs.digest }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Full | ${{ steps.meta.outputs.VERSION }} | \`${{ steps.build-full.outputs.digest }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Images signed with Cosign" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOMs generated and attached" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Vulnerability scans completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Platforms" >> $GITHUB_STEP_SUMMARY
          echo "- linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "- linux/arm64" >> $GITHUB_STEP_SUMMARY