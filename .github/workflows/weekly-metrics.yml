name: Weekly Metrics

on:
  schedule:
    # Run every Friday at 17:00 IST (11:30 UTC)
    - cron: '30 11 * * 5'
  workflow_dispatch:
    inputs:
      post_to_slack:
        description: 'Post metrics to Slack'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  collect-metrics:
    name: Collect Weekly Metrics
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Collect metrics
        id: metrics
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          python scripts/weekly_metrics.py

          # Capture metrics for output
          if [ -f "metrics/weekly.md" ]; then
            echo "metrics_collected=true" >> $GITHUB_OUTPUT
            echo "report_path=metrics/weekly.md" >> $GITHUB_OUTPUT
          else
            echo "metrics_collected=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit metrics report
        if: steps.metrics.outputs.metrics_collected == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add metrics/
          git commit -m "chore: update weekly metrics $(date +'%Y-%m-%d')" || echo "No changes to commit"

      - name: Push changes
        if: steps.metrics.outputs.metrics_collected == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

      - name: Post to Discord
        if: steps.metrics.outputs.metrics_collected == 'true' && vars.DISCORD_WEBHOOK_URL != ''
        env:
          DISCORD_WEBHOOK: ${{ vars.DISCORD_WEBHOOK_URL }}
        run: |
          # Extract key metrics from report
          PYPI_DOWNLOADS=$(grep "Last 7 days:" metrics/weekly.md | head -1 | grep -oP '\d+,?\d*' | head -1)
          DOCKER_PULLS=$(grep "Docker Hub:" metrics/weekly.md | grep -oP '\d+,?\d*' | head -1)
          P95_LATENCY=$(grep "P95 latency:" metrics/weekly.md | head -1 | grep -oP '\d+' | head -1)

          # Create Discord message
          DISCORD_MSG=$(cat <<EOF
          {
            "content": "üìä **GreenLang Weekly Metrics Update**",
            "embeds": [{
              "title": "Week Ending $(date +'%Y-%m-%d')",
              "color": 5814783,
              "fields": [
                {
                  "name": "üì¶ PyPI Downloads",
                  "value": "${PYPI_DOWNLOADS:-N/A}",
                  "inline": true
                },
                {
                  "name": "üê≥ Docker Pulls",
                  "value": "${DOCKER_PULLS:-N/A}",
                  "inline": true
                },
                {
                  "name": "‚ö° P95 Latency",
                  "value": "${P95_LATENCY:-N/A}ms",
                  "inline": true
                }
              ],
              "footer": {
                "text": "Full report: https://github.com/${{ github.repository }}/blob/main/metrics/weekly.md"
              }
            }]
          }
          EOF
          )

          # Post to Discord
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$DISCORD_MSG" \
            "$DISCORD_WEBHOOK"

      - name: Create metrics summary
        if: steps.metrics.outputs.metrics_collected == 'true'
        run: |
          echo "## üìä Weekly Metrics Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Extract and display key metrics
          if [ -f "metrics/weekly.md" ]; then
            # Get first 30 lines of the report for summary
            head -30 metrics/weekly.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "[View Full Report](https://github.com/${{ github.repository }}/blob/main/metrics/weekly.md)" >> $GITHUB_STEP_SUMMARY
          fi

  analyze-trends:
    name: Analyze Metric Trends
    needs: collect-metrics
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Analyze trends
        run: |
          # Check if we have multiple weeks of data
          METRICS_COUNT=$(ls -1 metrics/weekly_*.json 2>/dev/null | wc -l)

          if [ "$METRICS_COUNT" -gt 1 ]; then
            echo "Found $METRICS_COUNT weeks of metrics data"

            # Simple trend analysis
            python - <<EOF
          import json
          import glob
          from pathlib import Path

          # Load all metrics files
          metrics_files = sorted(glob.glob('metrics/weekly_*.json'))

          if len(metrics_files) >= 2:
              # Compare last two weeks
              with open(metrics_files[-2]) as f:
                  last_week = json.load(f)
              with open(metrics_files[-1]) as f:
                  this_week = json.load(f)

              # Calculate trends
              try:
                  last_pypi = last_week.get('pypi', {}).get('last_7_days', 0)
                  this_pypi = this_week.get('pypi', {}).get('last_7_days', 0)

                  if last_pypi > 0:
                      pypi_change = ((this_pypi - last_pypi) / last_pypi) * 100
                      print(f"PyPI downloads: {'üìà' if pypi_change > 0 else 'üìâ'} {pypi_change:.1f}%")
              except:
                  pass
          EOF
          else
            echo "Need at least 2 weeks of data for trend analysis"
          fi

  alert-on-thresholds:
    name: Check Alert Thresholds
    needs: collect-metrics
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Check thresholds
        run: |
          # Load latest metrics
          LATEST_METRICS=$(ls -1 metrics/weekly_*.json 2>/dev/null | tail -1)

          if [ -n "$LATEST_METRICS" ]; then
            # Check P95 latency threshold
            P95_LATENCY=$(python -c "
          import json
          with open('$LATEST_METRICS') as f:
              data = json.load(f)
              print(data.get('performance', {}).get('demo_pipeline', {}).get('p95_latency_ms', 0))
          ")

            # Alert if P95 > 2000ms
            if [ "$P95_LATENCY" -gt 2000 ]; then
              echo "‚ö†Ô∏è ALERT: P95 latency ($P95_LATENCY ms) exceeds threshold (2000ms)"
              echo "alert_triggered=true" >> $GITHUB_ENV
            fi

            # Check success rate threshold
            SUCCESS_RATE=$(python -c "
          import json
          with open('$LATEST_METRICS') as f:
              data = json.load(f)
              print(data.get('performance', {}).get('demo_pipeline', {}).get('success_rate', 100))
          ")

            # Alert if success rate < 99%
            if (( $(echo "$SUCCESS_RATE < 99" | bc -l) )); then
              echo "‚ö†Ô∏è ALERT: Success rate ($SUCCESS_RATE%) below threshold (99%)"
              echo "alert_triggered=true" >> $GITHUB_ENV
            fi
          fi

      - name: Create issue if alerts triggered
        if: env.alert_triggered == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚ö†Ô∏è Weekly Metrics Alert',
              body: `Performance thresholds exceeded in weekly metrics.

              Please review: [Weekly Metrics Report](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/metrics/weekly.md)

              cc @${context.repo.owner}`,
              labels: ['metrics', 'alert', 'performance']
            });
            console.log(`Created issue #${issue.data.number}`);