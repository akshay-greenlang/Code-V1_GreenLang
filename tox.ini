# Tox configuration for automated multi-version testing
# Run with: tox
# Run specific environment: tox -e py311
# Run in parallel: tox -p auto

[tox]
envlist = py310,py311,py312,lint,type,security,docs
isolated_build = True
skip_missing_interpreters = True
parallel_show_output = True

[testenv]
description = Run unit and integration tests with pytest
deps =
    -r requirements.txt
    pytest>=7.4.0
    pytest-cov>=4.1.0
    pytest-asyncio>=0.21.0
    pytest-mock>=3.11.0
    pytest-timeout>=2.1.0
    pytest-xdist>=3.3.0
    pytest-benchmark>=4.0.0
    pytest-snapshot>=0.9.0
    hypothesis>=6.80.0
commands =
    pytest {posargs:tests/} \
        --cov=greenlang \
        --cov-report=term-missing \
        --cov-report=html \
        --cov-report=xml \
        --timeout=30 \
        -n auto \
        --benchmark-skip
setenv =
    PYTHONPATH = {toxinidir}
    GREENLANG_TEST_MODE = true

[testenv:py310]
description = Python 3.10 testing
basepython = python3.10

[testenv:py311]
description = Python 3.11 testing
basepython = python3.11

[testenv:py312]
description = Python 3.12 testing
basepython = python3.12

[testenv:lint]
description = Run linting checks with ruff and black
skip_install = True
deps =
    ruff>=0.1.0
    black>=23.7.0
    isort>=5.12.0
commands =
    ruff check greenlang/ tests/ --statistics
    black --check --diff greenlang/ tests/
    isort --check-only --diff greenlang/ tests/

[testenv:type]
description = Run type checking with mypy strict mode
deps =
    mypy>=1.7.0
    types-PyYAML>=6.0.12
    types-requests>=2.31.0
    types-redis>=4.6.0
    types-click>=8.1.0
    types-jsonschema>=4.19.0
    {[testenv]deps}
commands =
    mypy greenlang/ --strict \
        --show-error-codes \
        --show-error-context \
        --pretty \
        --html-report mypy-report

[testenv:security]
description = Run security checks
deps =
    pip-audit>=2.6.0
    safety>=3.0.0
    bandit>=1.7.0
commands =
    pip-audit --desc --format json
    safety check --json
    bandit -r greenlang/ -ll -f json -o bandit-report.json

[testenv:performance]
description = Run performance benchmarks
deps =
    {[testenv]deps}
commands =
    pytest tests/performance/ \
        --benchmark-only \
        --benchmark-autosave \
        --benchmark-compare \
        --benchmark-histogram

[testenv:integration]
description = Run integration tests only
deps =
    {[testenv]deps}
commands =
    pytest tests/integration/ -v \
        --timeout=60 \
        --tb=short

[testenv:snapshot]
description = Run snapshot tests and update if needed
deps =
    {[testenv]deps}
    pytest-snapshot>=0.9.0
commands =
    pytest tests/snapshots/ \
        --snapshot-update \
        -v

[testenv:coverage]
description = Generate detailed coverage report
deps =
    {[testenv]deps}
    coverage[toml]>=7.2.0
commands =
    coverage run -m pytest tests/
    coverage report --fail-under=85
    coverage html
    coverage xml

[testenv:docs]
description = Build and validate documentation
deps =
    mkdocs>=1.5.0
    mkdocs-material>=9.0.0
    mkdocstrings>=0.23.0
commands =
    mkdocs build --strict

[testenv:cli]
description = Test CLI commands
deps =
    {[testenv]deps}
commands =
    greenlang --version
    greenlang --help
    greenlang agents
    pytest tests/unit/cli/ -v

[testenv:clean]
description = Clean up temporary files
skip_install = True
deps =
commands =
    python -c "import shutil; shutil.rmtree('.tox', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.coverage', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('mypy-report', ignore_errors=True)"
    python -c "import glob, os; [os.remove(f) for f in glob.glob('*.json')]"
    python -c "import glob, os; [os.remove(f) for f in glob.glob('*.xml')]"

[testenv:all]
description = Run all tests and checks
deps =
    {[testenv]deps}
    {[testenv:lint]deps}
    {[testenv:type]deps}
    {[testenv:security]deps}
commands =
    {[testenv:lint]commands}
    {[testenv:type]commands}
    {[testenv:security]commands}
    {[testenv]commands}

# Configuration for individual tools
[pytest]
minversion = 7.0
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = 
    --strict-markers
    --tb=short
    --disable-warnings
markers =
    unit: Unit tests
    integration: Integration tests
    performance: Performance tests
    snapshot: Snapshot tests
    slow: Slow tests
    example: Example tests

[coverage:run]
source = greenlang
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */site-packages/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod