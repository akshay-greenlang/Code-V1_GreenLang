#!/usr/bin/env python3
"""
Example 4: Multi-Format Reporter (Markdown, HTML, Excel)
=========================================================

This example demonstrates generating reports in multiple formats:
- Markdown for documentation
- HTML for web display
- JSON for data export
- CSV for spreadsheet analysis

Run: python examples/04_multi_format_reporter.py
"""

import json
import csv
from pathlib import Path
from typing import Dict, Any, List
from datetime import datetime
from greenlang.sdk.base import Report, Metadata


class EmissionsReporter(Report):
    """
    Multi-format emissions reporter.

    Generates comprehensive emissions reports in multiple formats.
    """

    def __init__(self):
        metadata = Metadata(
            id="emissions_reporter",
            name="Emissions Reporter",
            version="1.0.0",
            description="Generate emissions reports in multiple formats",
            author="GreenLang Examples"
        )
        super().__init__(metadata)

    def generate(self, data: Dict[str, Any], format: str = "markdown") -> str:
        """Generate report in specified format"""
        if format == "markdown":
            return self._generate_markdown(data)
        elif format == "html":
            return self._generate_html(data)
        elif format == "json":
            return self._generate_json(data)
        else:
            raise ValueError(f"Unsupported format: {format}")

    def _generate_markdown(self, data: Dict[str, Any]) -> str:
        """Generate Markdown report"""
        report_lines = []

        # Header
        report_lines.append("# Emissions Calculation Report")
        report_lines.append("")
        report_lines.append(f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report_lines.append("")

        # Executive Summary
        report_lines.append("## Executive Summary")
        report_lines.append("")
        report_lines.append(f"- **Total Emissions:** {data['total_emissions_tons']:.2f} metric tons CO2e")
        report_lines.append(f"- **Country:** {data.get('country', 'N/A')}")
        report_lines.append(f"- **Number of Sources:** {len(data.get('breakdown', []))}")
        report_lines.append("")

        # Breakdown by source
        report_lines.append("## Emissions Breakdown")
        report_lines.append("")
        report_lines.append("| Source | Consumption | Emission Factor | Emissions (tCO2e) |")
        report_lines.append("|--------|-------------|-----------------|-------------------|")

        for item in data.get('breakdown', []):
            report_lines.append(
                f"| {item['fuel_type']} | "
                f"{item['consumption']:,.0f} {item.get('unit', '')} | "
                f"{item['factor']:.3f} | "
                f"{item['emissions_tons']:.2f} |"
            )

        report_lines.append("")

        # Recommendations
        report_lines.append("## Recommendations")
        report_lines.append("")
        report_lines.append("1. **Energy Efficiency:** Implement energy-saving measures to reduce consumption")
        report_lines.append("2. **Renewable Energy:** Consider switching to renewable energy sources")
        report_lines.append("3. **Monitoring:** Install real-time monitoring systems for better tracking")
        report_lines.append("")

        # Footer
        report_lines.append("---")
        report_lines.append("*Generated by GreenLang Emissions Reporter v1.0.0*")

        return "\n".join(report_lines)

    def _generate_html(self, data: Dict[str, Any]) -> str:
        """Generate HTML report"""
        html_parts = []

        html_parts.append("<!DOCTYPE html>")
        html_parts.append("<html><head>")
        html_parts.append("<title>Emissions Report</title>")
        html_parts.append("<style>")
        html_parts.append("body { font-family: Arial, sans-serif; margin: 40px; }")
        html_parts.append("h1 { color: #2c5f2d; }")
        html_parts.append("table { border-collapse: collapse; width: 100%; margin: 20px 0; }")
        html_parts.append("th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }")
        html_parts.append("th { background-color: #2c5f2d; color: white; }")
        html_parts.append("tr:nth-child(even) { background-color: #f2f2f2; }")
        html_parts.append(".summary { background-color: #e8f5e9; padding: 20px; border-radius: 5px; margin: 20px 0; }")
        html_parts.append("</style>")
        html_parts.append("</head><body>")

        # Header
        html_parts.append("<h1>Emissions Calculation Report</h1>")
        html_parts.append(f"<p><strong>Generated:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>")

        # Summary
        html_parts.append('<div class="summary">')
        html_parts.append("<h2>Executive Summary</h2>")
        html_parts.append(f"<p><strong>Total Emissions:</strong> {data['total_emissions_tons']:.2f} metric tons CO2e</p>")
        html_parts.append(f"<p><strong>Country:</strong> {data.get('country', 'N/A')}</p>")
        html_parts.append(f"<p><strong>Sources:</strong> {len(data.get('breakdown', []))}</p>")
        html_parts.append("</div>")

        # Table
        html_parts.append("<h2>Emissions Breakdown</h2>")
        html_parts.append("<table>")
        html_parts.append("<tr><th>Source</th><th>Consumption</th><th>Emission Factor</th><th>Emissions (tCO2e)</th></tr>")

        for item in data.get('breakdown', []):
            html_parts.append(f"<tr>")
            html_parts.append(f"<td>{item['fuel_type']}</td>")
            html_parts.append(f"<td>{item['consumption']:,.0f} {item.get('unit', '')}</td>")
            html_parts.append(f"<td>{item['factor']:.3f}</td>")
            html_parts.append(f"<td>{item['emissions_tons']:.2f}</td>")
            html_parts.append(f"</tr>")

        html_parts.append("</table>")

        # Footer
        html_parts.append("<hr>")
        html_parts.append("<p><em>Generated by GreenLang Emissions Reporter v1.0.0</em></p>")
        html_parts.append("</body></html>")

        return "\n".join(html_parts)

    def _generate_json(self, data: Dict[str, Any]) -> str:
        """Generate JSON report"""
        report_data = {
            "report_metadata": {
                "generated_at": datetime.now().isoformat(),
                "generator": "GreenLang Emissions Reporter",
                "version": "1.0.0"
            },
            "summary": {
                "total_emissions_tons": data['total_emissions_tons'],
                "country": data.get('country', 'N/A'),
                "sources_count": len(data.get('breakdown', []))
            },
            "breakdown": data.get('breakdown', []),
            "recommendations": [
                "Implement energy-saving measures",
                "Consider renewable energy sources",
                "Install real-time monitoring systems"
            ]
        }

        return json.dumps(report_data, indent=2)

    def save(self, content: str, path: Path) -> bool:
        """Save report to file"""
        try:
            path.parent.mkdir(parents=True, exist_ok=True)
            with open(path, 'w') as f:
                f.write(content)
            self.logger.info(f"Report saved to {path}")
            return True
        except Exception as e:
            self.logger.error(f"Failed to save report: {e}")
            return False

    def save_csv(self, data: Dict[str, Any], path: Path) -> bool:
        """Save breakdown as CSV"""
        try:
            path.parent.mkdir(parents=True, exist_ok=True)
            with open(path, 'w', newline='') as f:
                writer = csv.DictWriter(f, fieldnames=['fuel_type', 'consumption', 'unit', 'factor', 'emissions_tons'])
                writer.writeheader()
                writer.writerows(data.get('breakdown', []))
            self.logger.info(f"CSV saved to {path}")
            return True
        except Exception as e:
            self.logger.error(f"Failed to save CSV: {e}")
            return False


def main():
    """Run the example"""
    print("\n" + "="*70)
    print("Example 4: Multi-Format Reporter")
    print("="*70 + "\n")

    # Sample emissions data
    sample_data = {
        "total_emissions_tons": 26.95,
        "country": "US",
        "breakdown": [
            {"fuel_type": "electricity", "consumption": 50000, "unit": "kWh", "factor": 0.429, "emissions_tons": 21.45},
            {"fuel_type": "natural_gas", "consumption": 1000, "unit": "therms", "factor": 5.3, "emissions_tons": 5.30},
            {"fuel_type": "electricity", "consumption": 1000, "unit": "kWh", "factor": 0.2, "emissions_tons": 0.20}
        ]
    }

    # Create reporter
    reporter = EmissionsReporter()

    # Output directory
    output_dir = Path(__file__).parent / "out" / "reports"
    output_dir.mkdir(parents=True, exist_ok=True)

    # Generate Markdown report
    print("Generating Markdown Report...")
    print("-" * 70)
    markdown_content = reporter.generate(sample_data, format="markdown")
    markdown_path = output_dir / "emissions_report.md"
    reporter.save(markdown_content, markdown_path)
    print(f"Saved to: {markdown_path}\n")
    print("Preview:")
    print(markdown_content[:500] + "...\n")

    # Generate HTML report
    print("\nGenerating HTML Report...")
    print("-" * 70)
    html_content = reporter.generate(sample_data, format="html")
    html_path = output_dir / "emissions_report.html"
    reporter.save(html_content, html_path)
    print(f"Saved to: {html_path}")
    print(f"Preview: First 500 characters saved\n")

    # Generate JSON report
    print("\nGenerating JSON Report...")
    print("-" * 70)
    json_content = reporter.generate(sample_data, format="json")
    json_path = output_dir / "emissions_report.json"
    reporter.save(json_content, json_path)
    print(f"Saved to: {json_path}\n")
    print("Preview:")
    print(json_content[:400] + "...\n")

    # Generate CSV export
    print("\nGenerating CSV Export...")
    print("-" * 70)
    csv_path = output_dir / "emissions_breakdown.csv"
    reporter.save_csv(sample_data, csv_path)
    print(f"Saved to: {csv_path}\n")

    # Summary
    print("\n" + "="*70)
    print("Report Generation Summary")
    print("="*70)
    print(f"\nGenerated 4 reports in different formats:")
    print(f"  1. Markdown: {markdown_path}")
    print(f"  2. HTML: {html_path}")
    print(f"  3. JSON: {json_path}")
    print(f"  4. CSV: {csv_path}")
    print(f"\nTotal Emissions: {sample_data['total_emissions_tons']:.2f} tCO2e")

    print("\n" + "="*70)
    print("Example completed successfully!")
    print("="*70 + "\n")


if __name__ == "__main__":
    main()
