# GreenLang Agent Specification v2.0
# Core Agent: FuelAgent
# Deterministic emissions calculator for fuel combustion
# Status: Production (P0 Critical)

agent_metadata:
  agent_id: "core/fuel_agent"
  agent_name: "FuelAgent"
  agent_number: "CORE-001"
  version: "0.0.1"
  domain: "Core_Foundation"
  category: "Deterministic_Calculator"
  complexity: "Low"
  priority: "P0_Critical"
  base_agent: "None"
  status: "Production"
  entry_point: false  # Used by other agents, not direct entry point

  description_short: "Deterministic CO2e emissions calculator for fuel combustion across 18 fuel types"

  tags:
    - "emissions_calculation"
    - "fuel_combustion"
    - "scope_1"
    - "scope_2"
    - "deterministic"
    - "ghg_protocol"
    - "production_ready"

description:
  purpose: |
    FuelAgent is a deterministic emissions calculator that converts fuel consumption
    data into CO2e emissions using authoritative emission factors from EPA, IPCC,
    and UK DEFRA. This is a foundational agent used by nearly all other agents in
    the GreenLang ecosystem for accurate, reproducible emissions calculations.

    The agent handles 18+ fuel types across multiple units, supports regional
    emission factors, includes renewable energy offsets, and provides efficiency
    adjustments. It operates as a pure calculation engine with zero AI/LLM
    dependencies, ensuring deterministic outputs for compliance and auditing.

  strategic_context:
    global_impact: "Fuel combustion = 35+ Gt CO2e/year (70% of global emissions)"
    opportunity: "Foundation for all emissions tracking and reduction initiatives"
    market_size: "$10T+ global energy market requiring emissions tracking"
    technology_maturity: "Production-ready calculation engine with 20+ years of standards"

  key_capabilities:
    - "Deterministic CO2e calculation: emissions = consumption × emission_factor"
    - "18+ fuel types supported: natural_gas, diesel, gasoline, coal, propane, fuel_oil, biomass, electricity, etc."
    - "50+ unit conversions: therms, gallons, liters, kWh, MWh, kg, tons, MMBtu, etc."
    - "Regional emission factors: US, EU, UK with country-specific grid carbon intensity"
    - "Renewable energy offsets for electricity (0-100% renewable percentage)"
    - "Efficiency adjustments for boilers, heaters, and process equipment"
    - "GHG Protocol Scope classification (Scope 1, 2, 3)"
    - "Energy content calculations (MMBtu equivalent)"
    - "Fuel switching recommendations with impact quantification"
    - "Performance tracking with cache optimization"
    - "Batch processing with parallel execution"
    - "Export capabilities (JSON, CSV, Excel)"
    - "Historical data tracking for trend analysis"

  dependencies:
    - agent_id: "core/emission_factors_database"
      relationship: "uses_data_from"
      data: "EPA, IPCC, UK DEFRA emission factors by fuel type, unit, and region"

    - agent_id: "core/unit_converter"
      relationship: "uses_utility_from"
      data: "Unit conversion for fuel volumes and energy content"

    - agent_id: "core/performance_tracker"
      relationship: "uses_utility_from"
      data: "Performance monitoring and optimization metrics"

  used_by_agents:
    - "industrial/process_heat_agent"
    - "hvac/boiler_agent"
    - "hvac/chiller_agent"
    - "transport/fleet_emissions_agent"
    - "building/building_emissions_agent"
    - "carbon/carbon_footprint_agent"

tools:
  # NOTE: FuelAgent is a DETERMINISTIC agent - it does NOT use AI/LLM
  # All calculations are performed by pure Python functions
  # This section documents the calculation methods as "tools" for consistency

  tool_count: 8

  tools_list:
    - tool_id: "tool_1"
      name: "calculate_fuel_emissions"
      description: "Calculate CO2e emissions from fuel consumption using authoritative emission factors"
      category: "calculation"
      deterministic: true

      parameters:
        type: "object"
        properties:
          fuel_type:
            type: "string"
            description: "Type of fuel being combusted"
            enum:
              - "natural_gas"
              - "diesel"
              - "gasoline"
              - "propane"
              - "lpg"
              - "fuel_oil"
              - "heating_oil"
              - "coal"
              - "biomass"
              - "wood"
              - "electricity"
              - "electric"
              - "district_heating"
              - "district_cooling"
              - "jet_fuel"
              - "aviation_gasoline"
              - "kerosene"
              - "residual_fuel_oil"
            required: true

          amount:
            type: "number"
            description: "Quantity of fuel consumed"
            minimum: 0
            required: true

          unit:
            type: "string"
            description: "Unit of measurement for fuel consumption"
            enum:
              - "therms"
              - "ccf"
              - "mcf"
              - "m3"
              - "MMBtu"
              - "gallons"
              - "liters"
              - "kg"
              - "tons"
              - "lbs"
              - "kWh"
              - "MWh"
              - "GWh"
            required: true

          country:
            type: "string"
            description: "Country/region code for emission factors"
            enum: ["US", "UK", "EU", "CA", "AU", "IN", "CN"]
            default: "US"

          renewable_percentage:
            type: "number"
            description: "Percentage of electricity from renewable sources (0-100)"
            minimum: 0
            maximum: 100
            default: 0
            note: "Only applicable for electricity fuel type"

          efficiency:
            type: "number"
            description: "Equipment efficiency factor (0-1 scale)"
            minimum: 0.3
            maximum: 1.0
            default: 1.0
            note: "Emissions adjusted by 1/efficiency if < 1.0"

        required: ["fuel_type", "amount", "unit"]

      returns:
        type: "object"
        properties:
          co2e_emissions_kg:
            type: "number"
            units: "kg CO2e"
            description: "Total CO2 equivalent emissions"

          emission_factor:
            type: "number"
            units: "kg CO2e per unit"
            description: "Emission factor used in calculation"

          emission_factor_unit:
            type: "string"
            description: "Unit of emission factor (e.g., kgCO2e/therm)"

          scope:
            type: "string"
            enum: ["1", "2", "3"]
            description: "GHG Protocol scope classification"

          calculation:
            type: "string"
            description: "Calculation formula used"
            example: "1000 therms × 5.31 kgCO2e/therm = 5,310 kg CO2e"

          renewable_offset_applied:
            type: "boolean"
            description: "Whether renewable offset was applied"

          efficiency_adjusted:
            type: "boolean"
            description: "Whether efficiency adjustment was applied"

      implementation:
        physics_formula: "Emissions (kg CO2e) = Amount × EmissionFactor / Efficiency"
        calculation_method: "Direct multiplication with emission factor lookup from database"
        data_source: "EPA 40 CFR Part 98, IPCC Guidelines, UK DEFRA emission factors"
        accuracy: "±0.01% for calculation (emission factor accuracy varies by source)"
        validation: "Compare against EPA eGRID, IPCC reference values"
        standards:
          - "GHG Protocol Corporate Standard"
          - "ISO 14064-1:2018"
          - "EPA 40 CFR Part 98"
          - "IPCC Guidelines for National GHG Inventories"

      example:
        input:
          fuel_type: "natural_gas"
          amount: 1000
          unit: "therms"
          country: "US"
          renewable_percentage: 0
          efficiency: 1.0
        output:
          co2e_emissions_kg: 5310.0
          emission_factor: 5.31
          emission_factor_unit: "kgCO2e/therm"
          scope: "1"
          calculation: "1000 therms × 5.31 kgCO2e/therm = 5,310 kg CO2e"
          renewable_offset_applied: false
          efficiency_adjusted: false

    - tool_id: "tool_2"
      name: "lookup_emission_factor"
      description: "Retrieve emission factor for specific fuel type, unit, and region"
      category: "lookup"
      deterministic: true

      parameters:
        type: "object"
        properties:
          fuel_type:
            type: "string"
            description: "Type of fuel"
            required: true

          unit:
            type: "string"
            description: "Unit of measurement"
            required: true

          region:
            type: "string"
            description: "Country or region code"
            default: "US"

        required: ["fuel_type", "unit"]

      returns:
        type: "object"
        properties:
          emission_factor:
            type: "number"
            units: "kg CO2e per unit"

          source:
            type: "string"
            description: "Data source (EPA, IPCC, UK DEFRA)"

          last_updated:
            type: "string"
            description: "Date of last emission factor update"

          data_quality_tier:
            type: "string"
            enum: ["Tier_1", "Tier_2", "Tier_3"]
            description: "IPCC data quality tier"

          uncertainty_percent:
            type: "number"
            description: "Uncertainty range (± %)"

      implementation:
        calculation_method: "Database lookup with LRU caching for performance"
        data_source: "EmissionFactors class with regional factor tables"
        accuracy: "Exact retrieval (accuracy depends on source data)"
        cache_strategy: "LRU cache with 256 entry limit, 1-hour TTL"

      example:
        input:
          fuel_type: "natural_gas"
          unit: "therms"
          region: "US"
        output:
          emission_factor: 5.31
          source: "EPA 40 CFR Part 98"
          last_updated: "2024-01-15"
          data_quality_tier: "Tier_1"
          uncertainty_percent: 2.0

    - tool_id: "tool_3"
      name: "calculate_energy_content"
      description: "Convert fuel consumption to energy content in MMBtu"
      category: "calculation"
      deterministic: true

      parameters:
        type: "object"
        properties:
          amount:
            type: "number"
            description: "Fuel amount"
            required: true

          unit:
            type: "string"
            description: "Fuel unit"
            required: true

          fuel_type:
            type: "string"
            description: "Type of fuel"
            required: true

        required: ["amount", "unit", "fuel_type"]

      returns:
        type: "object"
        properties:
          energy_mmbtu:
            type: "number"
            units: "MMBtu"
            description: "Energy content in million BTU"

          conversion_factor:
            type: "number"
            description: "BTU per unit of fuel"

          energy_gwh:
            type: "number"
            units: "GWh"
            description: "Energy in gigawatt-hours"

      implementation:
        calculation_method: "Unit converter with fuel-specific energy densities"
        data_source: "EIA energy conversion factors, ASHRAE Handbook"
        accuracy: "±0.5%"
        standards: ["DOE Energy Information Administration", "ASHRAE Handbook"]

      example:
        input:
          amount: 1000
          unit: "therms"
          fuel_type: "natural_gas"
        output:
          energy_mmbtu: 100.0
          conversion_factor: 100000
          energy_gwh: 0.0293

    - tool_id: "tool_4"
      name: "determine_ghg_scope"
      description: "Classify fuel type into GHG Protocol Scope 1, 2, or 3"
      category: "lookup"
      deterministic: true

      parameters:
        type: "object"
        properties:
          fuel_type:
            type: "string"
            description: "Type of fuel"
            required: true

        required: ["fuel_type"]

      returns:
        type: "object"
        properties:
          scope:
            type: "string"
            enum: ["1", "2", "3"]
            description: "GHG Protocol scope"

          scope_description:
            type: "string"
            description: "Explanation of scope classification"

          reporting_requirements:
            type: "array"
            items:
              type: "string"
            description: "Relevant reporting requirements"

      implementation:
        calculation_method: "Lookup table based on GHG Protocol definitions"
        data_source: "GHG Protocol Corporate Standard"
        accuracy: "100% (deterministic classification)"
        standards: ["GHG Protocol Corporate Standard", "ISO 14064-1"]

      scope_classification:
        scope_1:
          description: "Direct emissions from owned or controlled sources"
          fuel_types:
            - "natural_gas"
            - "diesel"
            - "gasoline"
            - "propane"
            - "fuel_oil"
            - "coal"
            - "biomass"

        scope_2:
          description: "Indirect emissions from purchased electricity, steam, heating, cooling"
          fuel_types:
            - "electricity"
            - "district_heating"
            - "district_cooling"

        scope_3:
          description: "All other indirect emissions in value chain"
          fuel_types:
            - "business_travel_fuels"
            - "employee_commuting"
            - "upstream_production"

      example:
        input:
          fuel_type: "natural_gas"
        output:
          scope: "1"
          scope_description: "Direct emissions from stationary combustion"
          reporting_requirements:
            - "GHG Protocol Scope 1"
            - "EPA GHGRP (if >25,000 MT CO2e/year)"
            - "ISO 14064-1 Clause 5.2.3"

    - tool_id: "tool_5"
      name: "apply_renewable_offset"
      description: "Calculate emissions reduction from renewable energy"
      category: "calculation"
      deterministic: true

      parameters:
        type: "object"
        properties:
          baseline_emissions_kg:
            type: "number"
            description: "Emissions before renewable offset"
            required: true

          renewable_percentage:
            type: "number"
            description: "Percentage renewable (0-100)"
            minimum: 0
            maximum: 100
            required: true

          renewable_type:
            type: "string"
            description: "Type of renewable energy"
            enum: ["solar", "wind", "hydro", "geothermal", "biomass", "mixed"]
            default: "mixed"

        required: ["baseline_emissions_kg", "renewable_percentage"]

      returns:
        type: "object"
        properties:
          adjusted_emissions_kg:
            type: "number"
            units: "kg CO2e"
            description: "Emissions after renewable offset"

          offset_amount_kg:
            type: "number"
            units: "kg CO2e"
            description: "Amount of emissions offset"

          reduction_percentage:
            type: "number"
            description: "Percentage reduction achieved"

      implementation:
        physics_formula: "Adjusted = Baseline × (1 - renewable_percentage/100)"
        calculation_method: "Linear reduction based on renewable percentage"
        accuracy: "±0.01%"
        standards: ["GHG Protocol Scope 2 Guidance", "RE100 Technical Criteria"]

      example:
        input:
          baseline_emissions_kg: 1000.0
          renewable_percentage: 30
          renewable_type: "solar"
        output:
          adjusted_emissions_kg: 700.0
          offset_amount_kg: 300.0
          reduction_percentage: 30.0

    - tool_id: "tool_6"
      name: "apply_efficiency_adjustment"
      description: "Adjust emissions based on equipment efficiency"
      category: "calculation"
      deterministic: true

      parameters:
        type: "object"
        properties:
          baseline_emissions_kg:
            type: "number"
            description: "Emissions at 100% efficiency"
            required: true

          efficiency:
            type: "number"
            description: "Equipment efficiency (0-1 scale)"
            minimum: 0.3
            maximum: 1.0
            required: true

        required: ["baseline_emissions_kg", "efficiency"]

      returns:
        type: "object"
        properties:
          adjusted_emissions_kg:
            type: "number"
            units: "kg CO2e"
            description: "Emissions adjusted for efficiency"

          additional_fuel_kg:
            type: "number"
            description: "Extra fuel consumed due to inefficiency"

      implementation:
        physics_formula: "Adjusted = Baseline / Efficiency"
        calculation_method: "Divide by efficiency to account for energy losses"
        accuracy: "±0.01%"
        note: "Lower efficiency requires more fuel to deliver same energy output"

      example:
        input:
          baseline_emissions_kg: 1000.0
          efficiency: 0.80
        output:
          adjusted_emissions_kg: 1250.0
          additional_fuel_kg: 250.0

    - tool_id: "tool_7"
      name: "generate_fuel_recommendations"
      description: "Generate fuel switching and efficiency improvement recommendations"
      category: "analysis"
      deterministic: true

      parameters:
        type: "object"
        properties:
          current_fuel_type:
            type: "string"
            description: "Current fuel being used"
            required: true

          annual_emissions_kg:
            type: "number"
            description: "Annual CO2e emissions"
            required: true

          country:
            type: "string"
            description: "Country for regional recommendations"
            default: "US"

        required: ["current_fuel_type", "annual_emissions_kg"]

      returns:
        type: "object"
        properties:
          recommendations:
            type: "array"
            items:
              type: "object"
              properties:
                priority:
                  type: "string"
                  enum: ["high", "medium", "low"]
                action:
                  type: "string"
                  description: "Recommended action"
                impact:
                  type: "string"
                  description: "Expected emissions reduction"
                feasibility:
                  type: "string"
                  enum: ["high", "medium", "low"]
            description: "List of recommendations"

          top_recommendation:
            type: "object"
            description: "Highest priority recommendation"

      implementation:
        calculation_method: "Rule-based recommendation engine with fuel switching matrix"
        data_source: "EPA fuel switching guidance, IEA technology reports"
        accuracy: "Impact estimates ±10%"

      fuel_switching_hierarchy:
        from_coal:
          - target: "natural_gas"
            reduction: "45%"
            priority: "high"
          - target: "biomass"
            reduction: "80%"
            priority: "medium"
          - target: "electricity_renewable"
            reduction: "95%"
            priority: "high"

        from_fuel_oil:
          - target: "natural_gas"
            reduction: "25%"
            priority: "medium"
          - target: "heat_pump"
            reduction: "60%"
            priority: "medium"

        from_natural_gas:
          - target: "renewable_natural_gas"
            reduction: "90%"
            priority: "low"
          - target: "hydrogen"
            reduction: "100%"
            priority: "low"
          - target: "heat_pump"
            reduction: "50%"
            priority: "medium"

      example:
        input:
          current_fuel_type: "coal"
          annual_emissions_kg: 100000
          country: "US"
        output:
          recommendations:
            - priority: "high"
              action: "Switch from coal to natural gas"
              impact: "45% emissions reduction (45,000 kg CO2e/year)"
              feasibility: "high"
            - priority: "high"
              action: "Install on-site renewable energy"
              impact: "Up to 95% emissions reduction"
              feasibility: "medium"
          top_recommendation:
            priority: "high"
            action: "Switch from coal to natural gas"
            impact: "45,000 kg CO2e/year reduction"

    - tool_id: "tool_8"
      name: "batch_calculate_emissions"
      description: "Calculate emissions for multiple fuel sources in parallel"
      category: "aggregation"
      deterministic: true

      parameters:
        type: "object"
        properties:
          fuel_sources:
            type: "array"
            items:
              type: "object"
              properties:
                fuel_type: "string"
                amount: "number"
                unit: "string"
                country: "string"
            description: "List of fuel consumption records"
            required: true

          parallel_execution:
            type: "boolean"
            description: "Enable parallel processing"
            default: true

        required: ["fuel_sources"]

      returns:
        type: "object"
        properties:
          total_emissions_kg:
            type: "number"
            units: "kg CO2e"
            description: "Total emissions across all sources"

          by_fuel_type:
            type: "object"
            description: "Emissions breakdown by fuel type"

          by_scope:
            type: "object"
            description: "Emissions breakdown by GHG scope"

          individual_results:
            type: "array"
            description: "Results for each fuel source"

          processing_time_ms:
            type: "number"
            description: "Total processing time"

      implementation:
        calculation_method: "ThreadPoolExecutor with max 5 workers"
        performance: "5x speedup for 10+ fuel sources"
        accuracy: "±0.01% (same as individual calculations)"

      example:
        input:
          fuel_sources:
            - fuel_type: "natural_gas"
              amount: 1000
              unit: "therms"
              country: "US"
            - fuel_type: "electricity"
              amount: 5000
              unit: "kWh"
              country: "US"
          parallel_execution: true
        output:
          total_emissions_kg: 7235.0
          by_fuel_type:
            natural_gas: 5310.0
            electricity: 1925.0
          by_scope:
            "1": 5310.0
            "2": 1925.0
          processing_time_ms: 45.2

ai_integration:
  # CRITICAL: FuelAgent is a DETERMINISTIC agent
  # It does NOT use AI/LLM for calculations
  # All numeric results come from deterministic Python functions

  ai_enabled: false

  explanation: |
    FuelAgent is intentionally designed as a DETERMINISTIC calculator without AI/LLM
    integration. This design choice ensures:

    1. REPRODUCIBILITY: Same input always produces identical output
    2. AUDITABILITY: Calculations can be traced and verified
    3. COMPLIANCE: Meets regulatory requirements for emissions reporting
    4. PERFORMANCE: Sub-millisecond calculations without API calls
    5. COST: Zero per-query cost (no LLM API fees)
    6. RELIABILITY: No dependency on external AI services

    For AI-enhanced emissions analysis with natural language explanations,
    see FuelAgentAI which wraps FuelAgent with ChatSession orchestration.

  alternative_ai_agent: "core/fuel_agent_ai"

  ai_wrapper_capabilities:
    - "Natural language query processing"
    - "Multi-step reasoning about fuel choices"
    - "Automated fuel switching recommendations"
    - "Comparative analysis across scenarios"
    - "Explanation generation for stakeholders"

sub_agents:
  # FuelAgent is a leaf agent with no sub-agents
  sub_agent_count: 0
  sub_agents_list: []

  note: |
    FuelAgent is used BY many other agents but does not coordinate sub-agents.
    It serves as a foundational calculation primitive in the agent hierarchy.

inputs:
  input_schema:
    type: "object"
    properties:
      fuel_type:
        type: "string"
        description: "Type of fuel being combusted"
        enum:
          - "natural_gas"
          - "diesel"
          - "gasoline"
          - "propane"
          - "lpg"
          - "fuel_oil"
          - "heating_oil"
          - "coal"
          - "biomass"
          - "wood"
          - "electricity"
          - "electric"
          - "district_heating"
          - "district_cooling"
          - "jet_fuel"
          - "aviation_gasoline"
          - "kerosene"
          - "residual_fuel_oil"
        required: true

      amount:
        type: "number"
        description: "Quantity of fuel consumed"
        minimum: 0
        required: true

      unit:
        type: "string"
        description: "Unit of measurement for fuel consumption"
        enum:
          - "therms"
          - "ccf"
          - "mcf"
          - "m3"
          - "MMBtu"
          - "gallons"
          - "liters"
          - "kg"
          - "tons"
          - "lbs"
          - "kWh"
          - "MWh"
          - "GWh"
        required: true

      country:
        type: "string"
        description: "Country/region code for emission factors"
        enum: ["US", "UK", "EU", "CA", "AU", "IN", "CN"]
        default: "US"

      year:
        type: "integer"
        description: "Year for emission factor (future: time-series factors)"
        minimum: 2000
        maximum: 2100
        default: 2025

      renewable_percentage:
        type: "number"
        description: "Percentage of electricity from renewable sources (0-100)"
        minimum: 0
        maximum: 100
        default: 0
        note: "Only applicable for electricity fuel type"

      efficiency:
        type: "number"
        description: "Equipment efficiency factor (0-1 scale)"
        minimum: 0.3
        maximum: 1.0
        default: 1.0

    required: ["fuel_type", "amount", "unit"]

  example_inputs:
    - name: "Natural Gas Heating"
      description: "Typical commercial building natural gas consumption"
      input:
        fuel_type: "natural_gas"
        amount: 10000
        unit: "therms"
        country: "US"
        efficiency: 0.85

    - name: "Fleet Diesel"
      description: "Transportation fleet diesel consumption"
      input:
        fuel_type: "diesel"
        amount: 5000
        unit: "gallons"
        country: "US"

    - name: "Grid Electricity with Renewables"
      description: "Facility electricity with 30% renewable energy"
      input:
        fuel_type: "electricity"
        amount: 100000
        unit: "kWh"
        country: "US"
        renewable_percentage: 30

    - name: "Coal Combustion"
      description: "Industrial coal-fired process heat"
      input:
        fuel_type: "coal"
        amount: 50
        unit: "tons"
        country: "US"

    - name: "Propane Forklift Fleet"
      description: "Warehouse forklift propane consumption"
      input:
        fuel_type: "propane"
        amount: 2000
        unit: "gallons"
        country: "US"

outputs:
  output_schema:
    type: "object"
    properties:
      co2e_emissions_kg:
        type: "number"
        units: "kg CO2e"
        description: "Total CO2 equivalent emissions"

      fuel_type:
        type: "string"
        description: "Fuel type (normalized, e.g., lpg → propane)"

      consumption_amount:
        type: "number"
        description: "Amount of fuel consumed"

      consumption_unit:
        type: "string"
        description: "Unit of fuel consumption"

      emission_factor:
        type: "number"
        description: "Emission factor used"

      emission_factor_unit:
        type: "string"
        description: "Unit of emission factor"

      country:
        type: "string"
        description: "Country/region for emission factor"

      scope:
        type: "string"
        enum: ["1", "2", "3"]
        description: "GHG Protocol scope"

      energy_content_mmbtu:
        type: "number"
        units: "MMBtu"
        description: "Energy content of fuel consumed"

      renewable_offset_applied:
        type: "boolean"
        description: "Whether renewable offset was applied"

      efficiency_adjusted:
        type: "boolean"
        description: "Whether efficiency adjustment was applied"

      recommendations:
        type: "array"
        items:
          type: "object"
        description: "Fuel switching and efficiency recommendations"

      calculation_time_ms:
        type: "number"
        description: "Calculation execution time"

      energy_content_info:
        type: "object"
        description: "Detailed energy content information"
        properties:
          value: "number"
          unit: "string"

    required:
      - "co2e_emissions_kg"
      - "fuel_type"
      - "emission_factor"
      - "scope"

  example_outputs:
    - name: "Natural Gas Result"
      input_ref: "Natural Gas Heating"
      output:
        co2e_emissions_kg: 62470.59
        fuel_type: "natural_gas"
        consumption_amount: 10000
        consumption_unit: "therms"
        emission_factor: 5.31
        emission_factor_unit: "kgCO2e/therm"
        country: "US"
        scope: "1"
        energy_content_mmbtu: 1000.0
        renewable_offset_applied: false
        efficiency_adjusted: true
        calculation_time_ms: 2.5
        recommendations:
          - priority: "medium"
            action: "Upgrade to high-efficiency condensing boiler"
            impact: "15-20% reduction in fuel consumption"
            feasibility: "high"

    - name: "Electricity with Renewables Result"
      input_ref: "Grid Electricity with Renewables"
      output:
        co2e_emissions_kg: 26950.0
        fuel_type: "electricity"
        consumption_amount: 100000
        consumption_unit: "kWh"
        emission_factor: 0.385
        emission_factor_unit: "kgCO2e/kWh"
        country: "US"
        scope: "2"
        energy_content_mmbtu: 341.2
        renewable_offset_applied: true
        efficiency_adjusted: false
        calculation_time_ms: 1.8
        recommendations:
          - priority: "high"
            action: "Increase renewable energy percentage to 100%"
            impact: "26,950 kg CO2e/year reduction"
            feasibility: "high"

    - name: "Coal Result"
      input_ref: "Coal Combustion"
      output:
        co2e_emissions_kg: 104300.0
        fuel_type: "coal"
        consumption_amount: 50
        consumption_unit: "tons"
        emission_factor: 2086.0
        emission_factor_unit: "kgCO2e/ton"
        country: "US"
        scope: "1"
        energy_content_mmbtu: 1250.0
        renewable_offset_applied: false
        efficiency_adjusted: false
        calculation_time_ms: 2.1
        recommendations:
          - priority: "high"
            action: "Switch from coal to natural gas"
            impact: "45% emissions reduction (46,935 kg CO2e/year)"
            feasibility: "high"
          - priority: "high"
            action: "Install industrial solar thermal system"
            impact: "Up to 80% emissions reduction"
            feasibility: "medium"

testing:
  test_coverage_target: 0.85
  current_coverage: 0.1379
  coverage_goal: "85%+ (critical P0 agent)"

  test_categories:
    - category: "unit_tests"
      description: "Test individual calculation methods and tool implementations"
      current_count: 8
      target_count: 35
      priority: "high"
      test_cases:
        - "test_calculate_emissions_natural_gas"
        - "test_calculate_emissions_diesel"
        - "test_calculate_emissions_electricity"
        - "test_calculate_emissions_coal"
        - "test_calculate_emissions_propane"
        - "test_lookup_emission_factor_us"
        - "test_lookup_emission_factor_eu"
        - "test_lookup_emission_factor_uk"
        - "test_energy_content_calculation"
        - "test_scope_determination_scope1"
        - "test_scope_determination_scope2"
        - "test_renewable_offset_50percent"
        - "test_renewable_offset_100percent"
        - "test_efficiency_adjustment_80percent"
        - "test_efficiency_adjustment_50percent"
        - "test_fuel_type_normalization"
        - "test_unit_conversion_therms_to_mmbtu"
        - "test_unit_conversion_gallons_to_liters"
        - "test_recommendations_coal"
        - "test_recommendations_fuel_oil"
        - "test_recommendations_natural_gas"
        - "test_recommendations_electricity"
        - "test_batch_processing_single"
        - "test_batch_processing_multiple"
        - "test_batch_processing_parallel"
        - "test_cache_hit"
        - "test_cache_miss"
        - "test_cache_performance"
        - "test_historical_data_tracking"
        - "test_performance_metrics"
        - "test_export_json"
        - "test_export_csv"
        - "test_export_excel"
        - "test_zero_amount"
        - "test_large_amount"

    - category: "integration_tests"
      description: "Test full agent workflows and multi-step calculations"
      current_count: 2
      target_count: 12
      priority: "high"
      test_cases:
        - "test_full_workflow_natural_gas"
        - "test_full_workflow_electricity_renewables"
        - "test_full_workflow_diesel_fleet"
        - "test_full_workflow_coal_replacement"
        - "test_multi_fuel_facility"
        - "test_renewable_energy_comparison"
        - "test_fuel_switching_scenario"
        - "test_efficiency_upgrade_scenario"
        - "test_monthly_tracking"
        - "test_annual_reporting"
        - "test_portfolio_aggregation"
        - "test_benchmark_comparison"

    - category: "validation_tests"
      description: "Test input validation and error handling"
      current_count: 3
      target_count: 15
      priority: "high"
      test_cases:
        - "test_missing_fuel_type"
        - "test_missing_amount"
        - "test_missing_unit"
        - "test_invalid_fuel_type"
        - "test_invalid_unit"
        - "test_invalid_country"
        - "test_negative_amount"
        - "test_zero_efficiency"
        - "test_efficiency_above_100"
        - "test_renewable_percentage_above_100"
        - "test_renewable_percentage_negative"
        - "test_unsupported_fuel_unit_combination"
        - "test_missing_emission_factor"
        - "test_malformed_payload"
        - "test_type_validation"

    - category: "boundary_tests"
      description: "Test edge cases and boundary conditions"
      current_count: 2
      target_count: 10
      priority: "medium"
      test_cases:
        - "test_zero_consumption"
        - "test_maximum_consumption"
        - "test_minimum_efficiency"
        - "test_maximum_efficiency"
        - "test_zero_renewable_percentage"
        - "test_100_renewable_percentage"
        - "test_very_small_amounts"
        - "test_very_large_amounts"
        - "test_all_supported_fuels"
        - "test_all_supported_units"

    - category: "performance_tests"
      description: "Test calculation speed and resource usage"
      current_count: 1
      target_count: 8
      priority: "medium"
      test_cases:
        - "test_single_calculation_latency"
        - "test_batch_processing_latency"
        - "test_cache_performance"
        - "test_memory_usage"
        - "test_concurrent_requests"
        - "test_throughput_1000_calculations"
        - "test_cache_hit_rate"
        - "test_parallel_speedup"

    - category: "accuracy_tests"
      description: "Validate calculation accuracy against known values"
      current_count: 1
      target_count: 12
      priority: "high"
      test_cases:
        - "test_accuracy_epa_reference_values"
        - "test_accuracy_ipcc_reference_values"
        - "test_accuracy_defra_reference_values"
        - "test_accuracy_egrid_comparison"
        - "test_accuracy_floating_point_precision"
        - "test_accuracy_large_numbers"
        - "test_accuracy_small_numbers"
        - "test_accuracy_rounding"
        - "test_accuracy_unit_conversions"
        - "test_accuracy_renewable_offset"
        - "test_accuracy_efficiency_adjustment"
        - "test_accuracy_multi_step_calculation"

    - category: "compliance_tests"
      description: "Verify compliance with GHG Protocol and ISO standards"
      current_count: 0
      target_count: 8
      priority: "high"
      test_cases:
        - "test_ghg_protocol_scope_classification"
        - "test_iso14064_boundary_definition"
        - "test_iso14064_data_quality"
        - "test_epa_40cfr98_methodology"
        - "test_ipcc_guidelines_tier_classification"
        - "test_emissions_factor_traceability"
        - "test_calculation_transparency"
        - "test_audit_trail_completeness"

  performance_requirements:
    max_latency_single_ms: 10
    max_latency_batch_100_ms: 250
    max_memory_mb: 128
    min_cache_hit_rate: 0.80
    min_throughput_per_second: 1000
    accuracy_tolerance_percent: 0.01

  regression_tests:
    enabled: true
    baseline_version: "0.0.1"
    comparison_threshold: 0.001
    note: "Verify calculations match previous versions within 0.1%"

deployment:
  pack_id: "core/fuel_calculator_pack"
  pack_version: "0.0.1"
  deployment_environment: "production"

  dependencies:
    python_version: ">=3.9"

    python_packages:
      - "pydantic>=2.0"
      - "typing-extensions>=4.5"
      - "numpy>=1.24"  # For numerical calculations
      - "pandas>=2.0"  # For data export features

    greenlang_modules:
      - "greenlang.types"
      - "greenlang.agents.base"
      - "greenlang.data.emission_factors"
      - "greenlang.utils.unit_converter"
      - "greenlang.utils.performance_tracker"

    external_services:
      - name: "None"
        note: "FuelAgent has zero external dependencies (fully offline capable)"

  resource_requirements:
    memory_mb: 128
    cpu_cores: 1
    gpu_required: false
    disk_space_mb: 50
    network_required: false

  scaling:
    horizontal_scaling: true
    max_instances: "unlimited"
    load_balancing: "round_robin"
    note: "Stateless agent suitable for horizontal scaling"

  api_endpoints:
    - endpoint: "/api/v1/agents/fuel/calculate"
      method: "POST"
      authentication: "required"
      rate_limit: "1000 requests/minute"

    - endpoint: "/api/v1/agents/fuel/batch"
      method: "POST"
      authentication: "required"
      rate_limit: "100 requests/minute"

    - endpoint: "/api/v1/agents/fuel/factors"
      method: "GET"
      authentication: "required"
      rate_limit: "1000 requests/minute"
      description: "Retrieve emission factors"

    - endpoint: "/api/v1/agents/fuel/performance"
      method: "GET"
      authentication: "required"
      rate_limit: "100 requests/minute"
      description: "Get performance metrics"

  monitoring:
    metrics:
      - "calculation_count"
      - "calculation_latency_ms"
      - "cache_hit_rate"
      - "error_rate"
      - "throughput_per_second"

    logging:
      level: "INFO"
      format: "JSON"
      destination: "cloudwatch"

    alerting:
      - condition: "error_rate > 1%"
        action: "page_on_call"
      - condition: "latency_p99 > 50ms"
        action: "email_team"
      - condition: "cache_hit_rate < 60%"
        action: "investigate"

documentation:
  readme: true
  api_docs: true
  examples: true
  tutorials: true

  readme_sections:
    - "Overview and Purpose"
    - "Supported Fuel Types (18+)"
    - "Supported Units (50+)"
    - "Quick Start Guide"
    - "API Reference"
    - "Examples"
    - "Emission Factor Sources"
    - "GHG Protocol Compliance"
    - "Performance Optimization"
    - "Troubleshooting"
    - "Contributing"
    - "Changelog"

  example_use_cases:
    - title: "Commercial Building Natural Gas"
      description: "Calculate emissions from natural gas heating in commercial building"
      industry: "Commercial Real Estate"
      input_example:
        fuel_type: "natural_gas"
        amount: 5000
        unit: "therms"
        country: "US"
        efficiency: 0.80
      output_summary: "26,550 kg CO2e (5,000 therms at 80% efficiency)"
      code_example: |
        from greenlang.agents import FuelAgent

        agent = FuelAgent()
        result = agent.run({
            "fuel_type": "natural_gas",
            "amount": 5000,
            "unit": "therms",
            "country": "US",
            "efficiency": 0.80
        })

        print(f"Emissions: {result['data']['co2e_emissions_kg']:,.0f} kg CO2e")

    - title: "Transportation Fleet Diesel"
      description: "Calculate emissions from diesel vehicle fleet"
      industry: "Logistics & Transportation"
      input_example:
        fuel_type: "diesel"
        amount: 10000
        unit: "gallons"
        country: "US"
      output_summary: "102,100 kg CO2e from 10,000 gallons diesel"
      code_example: |
        from greenlang.agents import FuelAgent

        agent = FuelAgent()
        result = agent.run({
            "fuel_type": "diesel",
            "amount": 10000,
            "unit": "gallons",
            "country": "US"
        })

        # Get recommendations
        recommendations = result['data']['recommendations']
        print(f"Top recommendation: {recommendations[0]['action']}")

    - title: "Data Center with Renewable Energy"
      description: "Calculate net emissions for data center with 50% renewable electricity"
      industry: "Technology"
      input_example:
        fuel_type: "electricity"
        amount: 1000000
        unit: "kWh"
        country: "US"
        renewable_percentage: 50
      output_summary: "192,500 kg CO2e (50% offset applied)"
      code_example: |
        from greenlang.agents import FuelAgent

        agent = FuelAgent()

        # Calculate baseline
        baseline = agent.run({
            "fuel_type": "electricity",
            "amount": 1000000,
            "unit": "kWh",
            "country": "US"
        })

        # Calculate with renewables
        with_renewables = agent.run({
            "fuel_type": "electricity",
            "amount": 1000000,
            "unit": "kWh",
            "country": "US",
            "renewable_percentage": 50
        })

        reduction = baseline['data']['co2e_emissions_kg'] - with_renewables['data']['co2e_emissions_kg']
        print(f"Reduction: {reduction:,.0f} kg CO2e (50%)")

    - title: "Industrial Coal to Gas Conversion"
      description: "Compare emissions before/after fuel switching from coal to natural gas"
      industry: "Manufacturing"
      input_example:
        # Before: Coal
        coal_input:
          fuel_type: "coal"
          amount: 100
          unit: "tons"
          country: "US"
        # After: Natural Gas
        gas_input:
          fuel_type: "natural_gas"
          amount: 38000
          unit: "therms"
          country: "US"
      output_summary: "45% reduction (208,600 → 114,730 kg CO2e)"
      code_example: |
        from greenlang.agents import FuelAgent

        agent = FuelAgent()

        # Current: Coal
        coal_result = agent.run({
            "fuel_type": "coal",
            "amount": 100,
            "unit": "tons",
            "country": "US"
        })

        # Proposed: Natural Gas (equivalent energy)
        gas_result = agent.run({
            "fuel_type": "natural_gas",
            "amount": 38000,
            "unit": "therms",
            "country": "US"
        })

        reduction = coal_result['data']['co2e_emissions_kg'] - gas_result['data']['co2e_emissions_kg']
        reduction_pct = (reduction / coal_result['data']['co2e_emissions_kg']) * 100

        print(f"Reduction: {reduction:,.0f} kg CO2e ({reduction_pct:.1f}%)")

    - title: "Multi-Fuel Facility Inventory"
      description: "Calculate total emissions for facility with multiple fuel types"
      industry: "Healthcare"
      input_example:
        fuels:
          - fuel_type: "natural_gas"
            amount: 15000
            unit: "therms"
          - fuel_type: "electricity"
            amount: 250000
            unit: "kWh"
          - fuel_type: "diesel"
            amount: 500
            unit: "gallons"
      output_summary: "Total: 181,295 kg CO2e across 3 fuel types"
      code_example: |
        from greenlang.agents import FuelAgent

        agent = FuelAgent()

        fuels = [
            {"fuel_type": "natural_gas", "amount": 15000, "unit": "therms", "country": "US"},
            {"fuel_type": "electricity", "amount": 250000, "unit": "kWh", "country": "US"},
            {"fuel_type": "diesel", "amount": 500, "unit": "gallons", "country": "US"}
        ]

        # Batch process
        results = agent.batch_process(fuels)

        total_emissions = sum(r['data']['co2e_emissions_kg'] for r in results)
        print(f"Total Emissions: {total_emissions:,.0f} kg CO2e")

        # Breakdown by fuel
        for result in results:
            data = result['data']
            print(f"{data['fuel_type']}: {data['co2e_emissions_kg']:,.0f} kg CO2e")

compliance:
  zero_secrets: true
  sbom_required: true
  digital_signature: true
  code_review_required: true

  standards:
    - name: "GHG Protocol Corporate Accounting and Reporting Standard"
      version: "Revised Edition 2015"
      compliance_level: "Full"
      verification: "Annual third-party verification"

    - name: "ISO 14064-1:2018"
      description: "Greenhouse gases - Part 1: Specification with guidance at the organization level"
      compliance_level: "Full"
      clauses:
        - "5.2.3 - Direct GHG emissions and removals"
        - "5.2.4 - Indirect GHG emissions from imported energy"
        - "6.4 - Quantification of GHG emissions and removals"

    - name: "EPA 40 CFR Part 98"
      description: "Mandatory Greenhouse Gas Reporting"
      compliance_level: "Full"
      applicability: "Facilities >25,000 MT CO2e/year"

    - name: "IPCC Guidelines for National Greenhouse Gas Inventories"
      version: "2006 (2019 Refinement)"
      compliance_level: "Full"
      tiers: ["Tier 1", "Tier 2", "Tier 3"]

    - name: "UK DEFRA Environmental Reporting Guidelines"
      version: "2023"
      compliance_level: "Full"

  data_quality:
    emission_factor_tiers:
      tier_1: "IPCC default factors (global averages)"
      tier_2: "Country-specific factors (EPA, DEFRA)"
      tier_3: "Facility-specific factors (direct measurement)"

    uncertainty_quantification:
      enabled: true
      method: "IPCC Tier 1 uncertainty analysis"
      typical_range: "±2-10% depending on fuel type"

  audit_trail:
    calculation_logging: true
    input_validation_logging: true
    emission_factor_versioning: true
    provenance_tracking: true

  certifications:
    - "ISO 14064 Verification Ready"
    - "GHG Protocol Compatible"
    - "CDP Reporting Compatible"
    - "SECR Compliant (UK Streamlined Energy and Carbon Reporting)"

  regulatory_jurisdictions:
    - "United States (EPA)"
    - "European Union (EU ETS)"
    - "United Kingdom (UK SECR)"
    - "Canada (ECCC)"
    - "Australia (NGER)"
    - "India (PAT Scheme)"
    - "China (National ETS)"

metadata:
  created_date: "2025-10-13"
  created_by: "Head of AI & Climate Intelligence"
  last_modified: "2025-10-13"
  review_status: "Production"
  reviewers:
    - "Chief AI & Climate Intelligence"
    - "Senior Carbon Accounting Specialist"
    - "Software Engineering Lead"

  version_history:
    - version: "0.0.1"
      date: "2025-10-13"
      changes: "Initial production specification for existing FuelAgent implementation"
      author: "Head of AI & Climate Intelligence"
      notes: "Documenting existing production agent (13.79% coverage → 85%+ target)"

  change_log:
    - version: "0.0.1"
      date: "2025-10-13"
      changes:
        - "Created comprehensive AgentSpec V2.0 specification"
        - "Documented 8 core calculation tools"
        - "Defined input/output schemas"
        - "Specified 85%+ test coverage requirements"
        - "Added 72 test cases across 7 categories"
        - "Documented compliance with GHG Protocol, ISO 14064, EPA 40 CFR Part 98"
        - "Included 6 detailed use case examples"
      author: "Head of AI & Climate Intelligence"

  future_enhancements:
    - version: "0.1.0"
      planned_date: "Q1 2026"
      features:
        - "Time-series emission factors (historical and projected)"
        - "Regional grid mix modeling"
        - "Hourly carbon intensity for electricity"
        - "Lifecycle emissions (Scope 3 upstream)"
        - "Carbon pricing integration"
        - "Renewable Energy Certificate (REC) tracking"
        - "Location-based vs Market-based Scope 2 calculations"

    - version: "0.2.0"
      planned_date: "Q2 2026"
      features:
        - "Machine learning for emission factor estimation"
        - "Anomaly detection for consumption data"
        - "Predictive analytics for future emissions"
        - "Integration with IoT sensors for real-time data"

  related_specifications:
    - "core/fuel_agent_ai.yaml - AI-enhanced version with ChatSession"
    - "hvac/boiler_agent.yaml - Uses FuelAgent for boiler emissions"
    - "industrial/process_heat_agent.yaml - Uses FuelAgent for baseline"
    - "carbon/carbon_agent.yaml - Aggregates FuelAgent results"
    - "report/report_agent.yaml - Reports FuelAgent calculations"

  notes: |
    This specification documents the existing production FuelAgent implementation.
    The agent is currently at 13.79% test coverage and requires expansion to 85%+
    to meet P0 Critical agent standards.

    FuelAgent is intentionally designed as a DETERMINISTIC calculator without AI/LLM
    to ensure reproducibility, auditability, and regulatory compliance. For AI-enhanced
    capabilities, see FuelAgentAI which wraps this agent with ChatSession orchestration.

    This is a foundational agent used by 20+ other agents in the GreenLang ecosystem.
    Any breaking changes require careful coordination and deprecation planning.

  production_readiness:
    code_complete: true
    tests_complete: false  # 13.79% → 85%+ needed
    documentation_complete: false  # README needed
    api_docs_complete: false  # OpenAPI spec needed
    performance_validated: true
    security_reviewed: true
    compliance_validated: true

  testing_priorities:
    priority_1: "Unit tests for all 18 fuel types"
    priority_2: "Accuracy tests against EPA/IPCC reference values"
    priority_3: "Validation tests for error handling"
    priority_4: "Integration tests for multi-fuel scenarios"
    priority_5: "Performance tests for batch processing"

  maintenance_schedule:
    emission_factor_updates: "Quarterly"
    code_review: "On every PR"
    dependency_updates: "Monthly"
    security_scans: "Weekly"
    performance_profiling: "Monthly"

# END OF FUELAGENT SPECIFICATION v0.0.1
# Production agent requiring test coverage expansion (13.79% → 85%+)
# Foundational deterministic calculator for GreenLang ecosystem
